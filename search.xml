<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java-IO流</title>
    <url>/2020/09/10/Java-IO%E6%B5%81/</url>
    <content><![CDATA[<p>简单介绍java的io流的概念</p>
<h1 id="一、IO概念"><a href="#一、IO概念" class="headerlink" title="一、IO概念"></a>一、IO概念</h1><ul>
<li>I/O就是input和output的缩写，是计算机调度把各个储存中（包括内存和外部储存）的数据写入写出的过程</li>
<li>所谓的外部设备可以包括硬盘文件, 网络设备, 另个程序等. 也就是当前程序之外的数据设备</li>
<li>java中用流（stream）来抽象表示这么一个写入写出的功能，封装成一个类，都放在java.io这个包里面</li>
</ul>
<a id="more"></a>
<h1 id="二、流（stream）的概念"><a href="#二、流（stream）的概念" class="headerlink" title="二、流（stream）的概念"></a>二、流（stream）的概念</h1><ul>
<li>stream（流）是从起源（source）到接收（sink）的有序数据。</li>
<li>如果把输入输出源比作“水桶”的话，“流”就相当于是连接他们的“管道”，这个管道的粗细、单向性等各种属性就是区分不同流的特性，流中的各种方法就是管道上的按钮，用于操作数据的流通。<br><img src="https://img-blog.csdnimg.cn/20200802143851170.jpg" alt="在这里插入图片描述"><h1 id="三、IO流的分类"><a href="#三、IO流的分类" class="headerlink" title="三、IO流的分类"></a>三、IO流的分类</h1><h2 id="1、按照流的方向"><a href="#1、按照流的方向" class="headerlink" title="1、按照流的方向"></a>1、按照流的方向</h2></li>
<li>输入流：只能从中读取数据（主要由InputStream和Reader作为基类）</li>
<li>输出流：只能向其写入数据（主要由OutputStream和Writer作为基类）<h2 id="2、按照流的操作颗粒度划分"><a href="#2、按照流的操作颗粒度划分" class="headerlink" title="2、按照流的操作颗粒度划分"></a>2、按照流的操作颗粒度划分</h2></li>
<li>字节流：以字节为单位，可操作任何数据（主要以InputStream和OutputStream作为基类）</li>
<li>字符流：以字符为单位，只能操作纯字符数据，比较方便（主要以Reader和Writer为基类）<h2 id="3、按照流的角色划分"><a href="#3、按照流的角色划分" class="headerlink" title="3、按照流的角色划分"></a>3、按照流的角色划分</h2></li>
<li>节点流：可以从/向一个特定的IO设备（如磁盘，网络）读/写数据的流，也叫低级流。</li>
<li>处理流：用于对一个已经存在的流进行连接和封装，通过封装后的流实现数据的读/写功能，也叫高级流。<h1 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h1>InputStream是Java标准库提供的最基本的输入流。InputStream是一个抽象类，是所有输入类的超类。这个抽象类定义的最重要的方法就是int read（）这样的一个方法</li>
</ul>
<blockquote>
<p> public abstract int read() throws IOException;<br> 这个方法会读取输入流的下一个字节，并返回字节表示的int值。如果己经&gt;  读到末尾，返回-1，表示不能继续读取了</p>
</blockquote>
<p>FileInputStream是InputStream的一个子类，可以用来从文件中获得数据，下面的代码演示了如何完整读取一个文件的字节：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">      InputStream inputStream&#x3D;new FileInputStream(&quot;src&#x2F;sample.txt&quot;);</span><br><span class="line">        for(;;)&#123;</span><br><span class="line">            int n&#x3D;inputStream.read();</span><br><span class="line">            if(n&#x3D;&#x3D;-1)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>注意：在计算机中，类似文件，网络端口这些资源，都是由操作系统统一管理，应用程序在运行的时候，如果打开了一个文件进行读写，完成后要及时关闭，以便操作系统把资源释放掉，否则，应用程序占用的资源会越来越多，不但白白占用内存还会影响其他应用程序的运行。</p>
<h2 id="1-缓冲"><a href="#1-缓冲" class="headerlink" title="1.缓冲"></a>1.缓冲</h2><p>在读取流的时候，一次读取一个字节并不是最高效的方法。很多流支持一次性读取多个字节到缓冲区，对于文件和网络流来说，利用缓冲区一次性读取多个字节的效率要高很多。InputStream提供两个重载方法来支持读取多个字节：</p>
<blockquote>
<p>int read(byte[] b): 读取若干字节填充到byte[]数组，返回读取的字节数<br>int read(byte[] b,int off,int len): 指定byte[]数组的偏移量和最大填充数</p>
</blockquote>
<p>利用上述方法读取多个字节时需要先定义一个byte[]数组作为缓冲区，read()会尽可能多的读取字节到缓冲区，但不会超过缓冲区容量的大小，read（）的返回值变为实际读取的字节数。若返回-1，则表示没有更多数据了。<br>栗子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException&#123;</span><br><span class="line">      InputStream inputStream&#x3D;new FileInputStream(&quot;src&#x2F;sample.txt&quot;);</span><br><span class="line">        byte[] butter&#x3D;new byte[5];</span><br><span class="line">        int n;</span><br><span class="line">        while((n&#x3D;inputStream.read(butter))!&#x3D;-1)&#123;</span><br><span class="line">            System.out.println(&quot;read&quot;+n+&quot;bytes\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-阻塞"><a href="#2-阻塞" class="headerlink" title="2.阻塞"></a>2.阻塞</h2><p>在调用InputStream的read()方法时，我们说它是阻塞的</p>
<blockquote>
<p>int n;<br>n=inputStream.read();<br>m=n;</p>
</blockquote>
<p>执行到第二行时，必须等read（）方法返回后才可以继续。因为读取IO流比普通代码速度要慢很多，无法确定read（）方法到底要花费多长时间，所以它是阻塞的。</p>
<h1 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h1><p>和InputStream相反，OutputStream是Java库中提供的最基本的输出流。<br>和InputStream类似，OutputStream也是抽象类，它是所有输出流的超类。这个抽象类定义的最重要的方法是void write(int b):</p>
<blockquote>
<p> public abstract void write(int b) throws IOException;</p>
</blockquote>
<p>这个方法会写入一个字节到输出流。要注意，虽然传入的是int类型的参数，但只会写入一个字节，即只写入int最低8位表示字节的部分。</p>
<ul>
<li>和InputStream一样，也有close（）方法，write（）也是阻塞的</li>
<li>OutputStream还提供了一个flush()方法，它的作用是将缓冲区的内容真正输入到目的地。</li>
</ul>
<p>为什么要有flush()方法？因为向网络、磁盘写入数据的时候，出于效率考虑，操作系统并不是输出一个字节就立马写入到文件或发送到网络，而是把输出的字节先放到内存的一个缓冲区（本质上也是一个byte[]数组），等到缓冲区写满，在一次性发送。对于很多IO设备，一次性写一个字节和一次性写1000个字节花费的时间几乎是一样的，所以这个flush方法的存在，就是强制把缓冲区的flush输出。</p>
<p>以FileOutputStream为例，演示将若干字节写入文件流：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line"> OutputStream outputStream &#x3D; new FileOutputStream(&quot;src&#x2F;sample.txt&quot;);</span><br><span class="line">        outputStream.write(108);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="Filter模式"><a href="#Filter模式" class="headerlink" title="Filter模式"></a>Filter模式</h1><ul>
<li>如果我们要给一个FileInputStream添加缓冲功能，则可以从FileInputStream派生出一个类<blockquote>
<p>BufferedFileInputStream extends FileInputstream</p>
</blockquote>
</li>
<li>如果我们要给一个FileInputStream添加计算签名功能，则可以派生一个类<blockquote>
<p>DigestFileInputStream extends FileInputstream</p>
</blockquote>
</li>
<li>若要添加加密解密功能，还可以派生一个类<blockquote>
<p>CipherFileInputStream extends FileInputstream</p>
</blockquote>
</li>
</ul>
<p>如果要给一个FileInputStream添加以上三种功能，用继承的方法实现的话，子类会比较多，实现的功能越多，子类就越复杂。因此直接使用继承的方法，为InputStream添加很多功能，根本无法控制代码的复杂度。</p>
<p>为了解决依赖继承导致子类数量失控的问题，JDK首先将InputStream分成两大类：</p>
<ol>
<li>直接提供数据的基础InputStream，例如<ul>
<li>FileInputStream</li>
<li>ByteArrayInputStream</li>
</ul>
</li>
<li>提供额外附加功能的InputStream。例如</li>
</ol>
<ul>
<li>BufferedInputStream</li>
<li>DigestInputStream</li>
</ul>
<p>当我们给一个基础的的InputStream附加各种功能时，我们先确定这个提供数据源的InputStream，即第一类Inputstream<br>例如：</p>
<blockquote>
<p>Inputstream file= new FileInputStream(“test.gz”);</p>
</blockquote>
<p>紧接着我们希望FileInputStream能提供缓冲的功能来提高读取效率，因此我们可以用BufferedInputStream来包装这个InputStream，得到的包装类型是BufferedInputStream，他仍可视为InputStream：</p>
<blockquote>
<p>InputStream buffered= new BufferedInputStream(file);</p>
</blockquote>
<p>无论包装了多少次，得到的对象始终是InputStream，我们zhijieyongInputStream来引用它，皆可以正常读取。</p>
<p>同理，OutputStream也是如此，这样的一种通过一个基础组件再叠加各种“附加”功能组件的模式，就叫做Filter模式。</p>
<h1 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h1><p>Reader是Java IO库提供的另一个输入流接口。和InputStream的区别是，Reader是一个字符流，以char为单位读取，而后者是一个字节流，以byte为单位。<br>|InputStream| Reader |<br>|–|–|<br>|字节流，byte  | 字符流，char |<br>|读取字节（-1，0<del>255):int read()|读取字符（-1，0</del>65535):int read()|<br>Reader定义了所有字符输入流的超类：</p>
<ul>
<li>FileReader实现了文字字符流的输入，使用时注意制定编码</li>
<li>CharArrayReader和StringReader可以在内存中模拟一个字符流输入</li>
</ul>
<p>Reader 是基于inputStream构造的：可以通过InPutStreanReader在制定编码的同时讲一个InputStream转化为Reader。</p>
<blockquote>
<p>Reader reader=new InputStreamReader(new FileInPutstream(“文件名路径”，“编码”));</p>
</blockquote>
<h1 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h1><p>Writer和OutputStream的联系与上面Reader差不多，不再赘述。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>java-堆栈</title>
    <url>/2020/10/02/java-%E5%A0%86%E6%A0%88/</url>
    <content><![CDATA[<p>java堆栈的学习</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>java-类加载机制</title>
    <url>/2020/10/10/java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="一、什么是java的类加载"><a href="#一、什么是java的类加载" class="headerlink" title="一、什么是java的类加载"></a>一、什么是java的类加载</h1><p>一个Java文件从编码完成到最终执行，一般主要包括两个过程</p>
<ul>
<li>编译</li>
<li>运行</li>
</ul>
<p><strong>编译</strong>，即把我们写好的java文件，通过javac命令编译成字节码，也就是我们常说的.class文件。</p>
<p><strong>运行</strong>，则是把编译生成的.class文件交给Java虚拟机(JVM)执行。</p>
<p>而我们所说的类加载过程即是指JVM虚拟机把.class文件中类信息加载进内存，并进行解析生成对应的class对象的过程。而这个类对象会包含成员变量、构造方法、成语方法等信息。</p>
<a id="more"></a>

<p><img src="https://user-gold-cdn.xitu.io/2018/2/12/1618814efa703be5?imageslim"></p>
<p>Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的加载机制。* .class文件由类装载器装载后，在JVM中将形成一份描述Class结构的元信息对象（类对象），通过该元信息对象可以获知Class的结构信息：如构造函数，属性和方法等。</p>
<p><strong>举例</strong>： JVM在执行某段代码时，遇到了class A， 然而此时内存中并没有class A的相关信息，于是JVM就会到相应的class文件中去寻找class A的类信息，并加载进内存中，这就是我们所说的类加载过程。并且这种加载的操作只会进行一次</p>
<h1 id="二、java类加载的流程"><a href="#二、java类加载的流程" class="headerlink" title="二、java类加载的流程"></a>二、java类加载的流程</h1><p><img src="https://user-gold-cdn.xitu.io/2018/2/12/1618817ff24341a3?imageslim"></p>
<h3 id="1-加载"><a href="#1-加载" class="headerlink" title="1.加载"></a>1.加载</h3><p>加载指的是把class字节码文件从各个来源通过类加载器装载入内存中。并为之创建一个java.lang.class对象。</p>
<p><img src="https://i.loli.net/2020/10/10/O3wGhyU8QIZFPsn.png" alt="84873221AC165DF03B0B6AA89CF31BFE.png"></p>
<ul>
<li><strong>字节码文件来源</strong>：一般的加载来源包括从本地路径下编译生成的.class文件，从jar包中的.class文件，从远程网络，以及动态代理实时编译</li>
<li><strong>类加载器</strong>：一般包括<strong>启动类加载器</strong>，<strong>扩展类加载器</strong>，<strong>应用类加载器</strong>，以及用户的<strong>自定义类加载器</strong>。</li>
</ul>
<ol>
<li><p>启动类加载器（Bootstrap ClassLoader）：负责加载JAVA_HOME\lib目录中并且能被虚拟机识别的类库到JVM内存中，如果名称不符合的类库即使放在lib目录中也不会被加载。该类加载器无法被Java程序直接引用。</p>
</li>
<li><p>扩展类加载器（Extension ClassLoader）：该加载器主要是负责加载JAVA_HOME\lib\，该加载器可以被开发者直接使用。</p>
</li>
<li><p>应用程序类加载器（Application ClassLoader）：该类加载器也称为系统类加载器，它负责加载用户类路径（Classpath）上所指定的类库，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p>
</li>
<li><p>自定义类加载器：若要实现自定义类加载器，只需要继承java.lang.ClassLoader 类，并且重写其findClass()方法即可。java.lang.ClassLoader 类的基本职责就是根据一个指定的类的名称，找到或者生成其对应的字节代码，然后从这些字节代码中定义出一个 Java 类，即 java.lang.Class 类的一个实例。</p>
</li>
</ol>
<p><strong>结论</strong>：加载阶段，虚拟机需要完成以下三件事情：</p>
<ol>
<li><p>通过一个类的全限定名来获取其定义的二进制字节流。</p>
</li>
<li><p>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>
</li>
<li><p>在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。</p>
</li>
</ol>
<h2 id="2-验证"><a href="#2-验证" class="headerlink" title="2.验证"></a><strong>2.验证</strong></h2><p>主要是为了保证加载进来的字节流符合虚拟机规范，不会造成安全错误。</p>
<p>包括对于<strong>文件格式的验证</strong>，比如常量中是否有不被支持的常量？文件中是否有不规范的或者附加的其他信息？</p>
<p>对于<strong>元数据的验证</strong>，比如该类是否继承了被final修饰的类？类中的字段，方法是否与父类冲突？是否出现了不合理的重载？</p>
<p>对于<strong>字节码的验证</strong>，保证程序语义的合理性，比如要保证类型转换的合理性。</p>
<p>对于<strong>符号引用的验证</strong>，比如校验符号引用中通过全限定名是否能够找到对应的类？校验符号引用中的访问性（private，public等）是否可被当前类访问？</p>
<h2 id="3-准备"><a href="#3-准备" class="headerlink" title="3.准备"></a><strong>3.准备</strong></h2><p>主要是为类变量（静态变量）（注意，不是实例变量）分配内存，并且赋予<strong>初值</strong>。</p>
<p>特别需要注意，<strong>初值，不是代码中具体写的初始化的值</strong>，而是Java虚拟机根据不同变量类型的默认初始值。</p>
<p>比如8种<strong>基本类型</strong>的初值，默认为0；<strong>引用类型</strong>的初值则为null；<strong>常量</strong>的初值即为代码中设置的值，final static tmp = 456， 那么该阶段tmp的初值就是456。</p>
<h2 id="4-解析"><a href="#4-解析" class="headerlink" title="4.解析"></a><strong>4.解析</strong></h2><p>将常量池内的符号引用替换为直接引用的过程。</p>
<ul>
<li><strong>符号引用</strong>。即一个字符串，但是这个字符串给出了一些能够唯一性识别一个方法，一个变量，一个类的相关信息。</li>
<li><strong>直接引用</strong>。可以理解为一个内存地址，或者一个偏移量。比如<strong>类方法，类变量</strong>的直接引用是指向方法区的<strong>指针</strong>；而<strong>实例方法，实例变量</strong>的直接引用则是从实例的头指针开始算起到这个实例变量位置的<strong>偏移量</strong></li>
</ul>
<p>举个例子来说，现在调用方法hello()，这个方法的地址是1234567，那么hello就是符号引用，1234567就是直接引用。</p>
<p>在解析阶段，虚拟机会把所有的类名，方法名，字段名这些符号引用替换为具体的内存地址或偏移量，也就是直接引用。</p>
<h2 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5.初始化"></a><strong>5.初始化</strong></h2><p>这个阶段主要是对<strong>类变量</strong>初始化，是执行类构造器的过程。</p>
<p>换句话说，只对static修饰的变量或语句进行初始化。</p>
<p>如果初始化一个类的时候，其父类尚未初始化，则优先初始化其父类。</p>
<p>如果同时包含多个静态变量和静态代码块，则按照自上而下的顺序依次执行。</p>
<p>JVM初始化执行<strong>构造器方法</strong>的过程：</p>
<p>1）类构造器方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序所决定。</p>
<p>2）类构造器方法与类的构造函数不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的类构造器方法执行之前，父类的类构造器方法已经执行完毕，因此在虚拟机中第一个执行的类构造器方法的类一定是java.lang.Object。</p>
<p>3）由于父类的类构造器方法方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作。</p>
<p>4）类构造器方法对于类或者接口来说并不是必需的，如果一个类中没有静态语句块也没有对变量的赋值操作，那么编译器可以不为这个类生成类构造器方法。</p>
<p>5）接口中可能会有变量赋值操作，因此接口也会生成类构造器方法。但是接口与类不同，执行接口的类构造器方法不需要先执行父接口的类构造器方法。只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也不会执行接口的类构造器方法。</p>
<p>6）虚拟机会保证一个类的类构造器方法在多线程环境中被正确地加锁和同步。如果有多个线程去同时初始化一个类，那么只会有一个线程去执行这个类的类构造器方法，其它线程都需要阻塞等待，直到活动线程执行类构造器方法完毕。如果在一个类的类构造器方法中有耗时很长的操作，那么就可能造成多个进程阻塞。</p>
<h2 id="三、什么时候开始类的初始化"><a href="#三、什么时候开始类的初始化" class="headerlink" title="三、什么时候开始类的初始化"></a>三、什么时候开始类的初始化</h2><p>什么情况下需要开始类加载过程的第一个阶段:”加载”。虚拟机规范中并没强行约束，这点可以交给虚拟机的的具体实现自由把握，但是对于初始化阶段虚拟机规范是严格规定了如下几种情况，如果类未初始化会对类进行初始化。</p>
<p>1、创建类的实例</p>
<p>2、访问类的静态变量(除常量【被final修辞的静态变量】)</p>
<p>3、访问类的静态方法</p>
<p>4、反射如(Class.forName(“my.xyz.Test”))</p>
<p>5、当初始化一个类时，发现其父类还未初始化，则先出发父类的初始化</p>
<p>6、虚拟机启动时，定义了main()方法的那个类先初始化</p>
<h2 id="四、简单分析"><a href="#四、简单分析" class="headerlink" title="四、简单分析"></a>四、简单分析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTon singleTon = <span class="keyword">new</span> SingleTon();  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count1;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count2 = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        count1++;  </span><br><span class="line">        count2++;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> singleTon;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        SingleTon singleTon = SingleTon.getInstance();  </span><br><span class="line">        System.out.println(<span class="string">&quot;count1=&quot;</span> + singleTon.count1);  </span><br><span class="line">        System.out.println(<span class="string">&quot;count2=&quot;</span> + singleTon.count2);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1:SingleTon singleTon = SingleTon.getInstance();调用了类的SingleTon调用了类的静态方法，触发类的初始化</p>
<p>2:类加载的时候在准备过程中为类的静态变量分配内存并初始化默认值 singleton=null count1=0,count2=0</p>
<p>3:类初始化化，为类的静态变量赋值和执行静态代码快。singleton赋值为new SingleTon()调用类的构造方法</p>
<p>4:调用类的构造方法后count=1;count2=1</p>
<p>5:继续为count1与count2赋值,此时count1没有赋值操作,所有count1为1,但是count2执行赋值操作就变为0。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>java-核心技术卷五,六章</title>
    <url>/2020/11/14/java-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7%E4%BA%94-%E5%85%AD%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="Java-讲解–核心技术第五章，第六章"><a href="#Java-讲解–核心技术第五章，第六章" class="headerlink" title="Java 讲解–核心技术第五章，第六章"></a>Java 讲解–核心技术第五章，第六章</h1><h2 id="第五章继承"><a href="#第五章继承" class="headerlink" title="第五章继承"></a>第五章继承</h2><h3 id="一-父类和子类，继承思想"><a href="#一-父类和子类，继承思想" class="headerlink" title="一. 父类和子类，继承思想"></a>一. 父类和子类，继承思想</h3><blockquote>
<p>利用继承，人们可以基于已经存在的类构造一个新类。继承已经存在的类就是复用（继承）这些类的方法和域。在此基础上，还可以添加一些新的方法和域，以满足新的需求。</p>
</blockquote>
<p>java中继承是一个非常基础并且非常重要的内容，对于理解面向对象的思想非常重要</p>
<!--get more-->

<p>比如我们定义一个Employee类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">    <span class="keyword">private</span> LocalDate hireDay;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法，用于初始化类的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">double</span> salary, <span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">        <span class="keyword">this</span>.hireDay = LocalDate.of(year, month, day);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getHireDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hireDay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHireDay</span><span class="params">(LocalDate hireDay)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hireDay = hireDay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> raise = salary * byPercent / <span class="number">100</span>;</span><br><span class="line">        salary += raise;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的类就规范了一个Employee（职员）具有的性质，比如姓名，薪水，雇佣日期。但是相比于普通（Employee）职员，还有一类特殊的人（Manager），他们除了拥有Employee的属性和方法，还有一些特殊的福利，比如他们有奖金（bonus），那我们写Manager类时，还要把上面的代码再写一遍，这样会导致代码出现大量的重复，而java针对这样的情形，就提供了继承的思路：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name, <span class="keyword">double</span> salary, <span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, salary, year, month, day);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面几行代码就使得Manager拥有了Employee的属性和方法，同时构造器也覆盖了Employee的构造器，但要注意的是，</p>
<ul>
<li><strong>对于父类的（私有的）private修饰的属性和方法，子类是不可见的，子类如果要访问私有成员的话，只能调用具有更高访问权限的父类的方法去访问</strong></li>
<li>子类的方法不适用于父类的对象，而父类的方法子类是可适用于子类的</li>
<li>对于某些方法，子类可能与父类的有冲突，我们可以在子类利用通过重写同名方法将父类的方法覆盖掉，这样对于子类对象调用该方法的时候，会默认调用子类的方法</li>
<li>super关键字：就是让编译器去这个类的父类class文件里去检索调用方法，或者调用父类的构造方法</li>
<li>子类构造器：利用supper调用父类构造器必须是子类构造器的第一条语句;如果子类的构造器没有显式调用父类的构造器，则会自动调用父类的默认的没有参数的构造器，如果父类没有不带参的构造器，那么会编译报错。</li>
</ul>
<p>而针对子类所特有的属性和方法就在子类里加就好：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">double</span> bonus;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name, <span class="keyword">double</span> salary, <span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, salary, year, month, day);</span><br><span class="line">      	bonus = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBonus</span><span class="params">(<span class="keyword">double</span> bonus)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.bonus = bonus;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bonus + <span class="keyword">super</span>.getSalary();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//		@Override</span></span><br><span class="line"><span class="comment">//    public double getSalary() &#123;</span></span><br><span class="line"><span class="comment">//        return bonus + salary;</span></span><br><span class="line"><span class="comment">//				return bonus + getSalary();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>继承层次</strong>：</p>
<blockquote>
<p>由一个公共父类派生出来的所有类的集合称为继承层次，在继承层次中，从某个特定的类到其祖先的类的路径被称为该类的继承链。</p>
</blockquote>
<p>Java是不支持多继承的，就是说一个子类只能继承自一个父类，不能有多个父类。</p>
<h3 id="二-多态"><a href="#二-多态" class="headerlink" title="二.多态"></a>二.多态</h3><p><strong>多态：</strong></p>
<p>父类的引用指向子类的对象，当我们声明一个父类的对象，它既可以引用一个父类的对象，也可以引用一个子类的对象，书上说的是，出现超类对象的任何地方都可以用子类的对象置换。反过来是不行的，不能将一个超类的引用赋给子类的变量。看下面的代码，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Employee e;</span><br><span class="line">        Manager staff2 = <span class="keyword">new</span> Manager(<span class="string">&quot;b&quot;</span>,<span class="number">5000</span>,<span class="number">2020</span>,<span class="number">11</span>,<span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">        e = staff2;</span><br><span class="line"></span><br><span class="line">        System.out.println(e.getClass());						</span><br><span class="line">        System.out.println(e <span class="keyword">instanceof</span> Employee);</span><br><span class="line">        System.out.println(e <span class="keyword">instanceof</span> Manager);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//结果：</span></span><br><span class="line">  <span class="comment">// class extend.Manager</span></span><br><span class="line">	<span class="comment">// true</span></span><br><span class="line">	<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>e被声明为一个Employee对象以后，把Employee的子类Manager的对象赋值给e后，我们发现它既是一个Manager实例，也是一个Employee实例，一个对象，两个状态，就是多态了</p>
<p>写了一个好玩的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(Food food)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m eating &quot;</span>+food.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span>  <span class="title">Food</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Apple&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> <span class="keyword">implements</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Banana&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Peach</span> <span class="keyword">implements</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Peach&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.eat(<span class="keyword">new</span> Apple());</span><br><span class="line">        p.eat(<span class="keyword">new</span> Banana());</span><br><span class="line">        p.eat(<span class="keyword">new</span> Peach());</span><br><span class="line">        p.eat(<span class="keyword">new</span> Food() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后打印出来的结果：    </p>
<blockquote>
<p>I’m eating Apple<br>I’m eating Banana<br>I’m eating Peach<br>I’m eating unknown</p>
</blockquote>
<p>在实现了Food接口以后，Apple类，Banan类还有Peach类都可以向上转型变为Food，也就是说他们的对象都可以当作food对象来用，当person调用eat方法的时候，可以把这些水果的对象传进，因为他们本身就是Food对象的实例，而调用food的getName方法的时候，就会优先检索具体实现类的方法，这里的多态不是继承里面的，但是思想一样。</p>
<h3 id="三-抽象类"><a href="#三-抽象类" class="headerlink" title="三.抽象类"></a>三.抽象类</h3><p>在面向对象的概念中，所有的对象都是通过类来描述，但并非所有的类都用来来描述对象，如果一个类中没有包含足够的信息来描述一个具体的对象，这样的类就可以作为抽象类。</p>
<p>举个例子：所有的动物（animal）都可以移动（move），可以吃东西（eat），但是不同的动物，它移动或者吃东西都是不一样的，必须由具体的种类实现，比如鱼是游，吃蚯蚓，蛇是爬行，吃老鼠，这样，我们把移动和吃东西抽象出来写成一个抽象类，让他的子类去实现:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Snack</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;蛇是爬行动物&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;蛇是吃老鼠的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fish</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鱼在水里游&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鱼吃蚯蚓&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Snack snack = <span class="keyword">new</span> Snack();</span><br><span class="line">        Fish fish = <span class="keyword">new</span> Fish();</span><br><span class="line">        snack.move();</span><br><span class="line">        snack.eat();</span><br><span class="line">        fish.move();</span><br><span class="line">        fish.eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>蛇是爬行动物<br>蛇是吃老鼠的<br>鱼在水里游<br>鱼吃蚯蚓</p>
</blockquote>
<p>抽象类除了不能实例化对象，类的其他功能仍然存在（可以有构造器，但不一定要有抽象方法），所有抽象类必须要被继承后才可以使用</p>
<p>抽象方法：如果想要设计一个类，包含一个特别的成员方法，该方法的具体实现由他的子类确定，可以在父类中声明为抽象方法（抽象方法是没有方法体的），那么这个类也就是抽象类了（不写abstract会报错），任何继承了这个抽象类的子类都必须重写这个抽象方法，或者声明自己是一个抽象类，其中构造方法和静态方法是不能被声明为抽象的。</p>
<p><strong>为什么抽象类也要有一个构造器呢？</strong></p>
<p>1.首先要知道JAVA中的构造器，不是用来实例化对象的，而是用来初始化的。</p>
<p>2.抽象类中并不都是抽象方法，里面有成员变量，构造器是用来给这些成员变量赋值的。</p>
<p>【补充】：abstract只能用来修饰类和方法，不能用来修饰属性。</p>
<p>3.要知道抽象类是用来继承的，为什么用来继承，一般是用来实现多态！那么我们知道，在new一个子类对象的时候，默认调用了super();</p>
<p>那如果没有构造器，这个super怎么调用啊。</p>
<h3 id="四-老父亲–Object类相关介绍，泛型数组数组，包装和自动装箱"><a href="#四-老父亲–Object类相关介绍，泛型数组数组，包装和自动装箱" class="headerlink" title="四.老父亲–Object类相关介绍，泛型数组数组，包装和自动装箱"></a>四.老父亲–Object类相关介绍，泛型数组数组，包装和自动装箱</h3><p><strong>Object类</strong>：如果一个类继承了其他父类，就不会直接继承Object，但是它的父类如果再没有父类，就会继承Object，也就是说，Object是任何一个类的直接或间接的父类。因此，我们随意创建一个类，其实也不是空的，起码这个类中有Object类中的属性和方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Example</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">	<span class="function">pubic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">				Example example = <span class="keyword">new</span> Example();</span><br><span class="line">				System.out.println(example.equals(<span class="keyword">null</span>));</span><br><span class="line">        System.out.println(example.getClass());</span><br><span class="line">        System.out.println(example.hashCode());</span><br><span class="line">        System.out.println(example.toString());</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>false<br>class extend.Example<br>603742814<br>extend.Example@23fc625e</p>
</blockquote>
<p><strong>简单介绍一下Object里的几个方法</strong>：</p>
<ol>
<li><p>equals()方法：</p>
<ol>
<li><pre><code class="java">public boolean equals(Object obj) &#123;
        return (this == obj);
    &#125;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   2. 由方法定义可知，Object类中的equals方法，用来比较两个引用的虚地址。当且仅当两个引用在物理上是同一个对象时，返回值为true，否则将返回false。</span><br><span class="line"></span><br><span class="line">   3. **注意：**当此方法被重写时，通常有必要重写 hashCode 方法，以维护 hashCode 方法的常规协定，该协定声明相等对象必须具有相等的哈希码。</span><br><span class="line"></span><br><span class="line">2. hashCode()方法：</span><br><span class="line"></span><br><span class="line">   1. &#96;&#96;&#96;java</span><br><span class="line">      public native int hashCode();</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>native含义native方法称为本地方法。在java源程序中以关键字“native”声明，不提供函数体。<br>其实现使用C/C++语言在另外的文件中编写，编写的规则遵循Java本地接口的规范(简称JNI)。<br>简而言就是Java中声明的可调用的使用C/C++实现的方法。</p>
</li>
<li><p>总之不管怎么生成的散列码，在Object 类里，equals返回为true，则hashCode是相同的</p>
</li>
<li><p>书上讲了一下String类复写的hashCode（）方法：</p>
<ol>
<li><blockquote>
<p>int hash = 0;</p>
<p>for(int i = 0; i &lt; length(); i++){</p>
<p>​    hash = 31 * hash + charAt(i);</p>
<p>}</p>
</blockquote>
</li>
<li><p>所以对于String类的对象来说来说，只要内容是一样的，则他们散列码就是一样的，而书中的StringBuilder类，没有定义hashCode()方法，所以必须要是一个对象或者一个对象的引用才会返回一样的散列码。</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>getClass()方法：</p>
<ol>
<li>返回运行时包含对象信息的类对象,后面反射再说</li>
</ol>
</li>
<li><p>toString()方法：</p>
<ol>
<li><p>返回表示对象值的字符串，没有重写的话，就是一个类名接着一个字符串</p>
<blockquote>
<p>extend.Example@23fc625e</p>
</blockquote>
</li>
<li><p>一般会重写这个方法打印一个对象的基本信息</p>
</li>
</ol>
</li>
</ol>
<p><strong>泛型数组列表</strong>：ArrayList&lt;类型名&gt;(数量)；</p>
<ol>
<li><p>泛型就是广泛的类型，这里的泛型数组就是可以存放某个特定类型的对象的数组，比如</p>
<blockquote>
<p>ArrayList&lt; Employee &gt; staff = new ArrayList&lt;&gt;(100);</p>
<p>这里就规定这个泛型数组存放Employee对象，且容量设置为100，注意泛型数组的容量可以不设置，不像c语言一样，声明就必须规定大小，并且泛型数组会自动扩容，当这里超过100个元素就会自动扩容。</p>
</blockquote>
</li>
<li><p>可以用add()方法和get()方法添加和访问数组元素，方法都比较简单。</p>
</li>
</ol>
<p><strong>对象包装器和自动装箱</strong>：</p>
<p>对象包装器类是不可变的，一旦构造了包装器，由于他的值被final修饰，就无法改变包装在其中的值，同时类被final修饰，不能被继承</p>
<table>
<thead>
<tr>
<th align="center">基本数据类型</th>
<th>包装类</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td>Byte</td>
<td></td>
</tr>
<tr>
<td align="center">short</td>
<td>Short</td>
<td></td>
</tr>
<tr>
<td align="center">int</td>
<td>Integer</td>
<td></td>
</tr>
<tr>
<td align="center">long</td>
<td>Long</td>
<td></td>
</tr>
<tr>
<td align="center">float</td>
<td>Float</td>
<td></td>
</tr>
<tr>
<td align="center">double</td>
<td>Double</td>
<td></td>
</tr>
<tr>
<td align="center">char</td>
<td>Character</td>
<td></td>
</tr>
<tr>
<td align="center">boolean</td>
<td>Boolean</td>
<td></td>
</tr>
</tbody></table>
<p>​      Integer里的value和构造器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.value = value;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>之前介绍的泛型数组当要储存基本类型数据时，由于&lt;&gt;里必须是类型参数，所以只能填类型名，而不能填基本数据类型，只能写成<code> ArrayList&lt;Integer&gt;()</code>这样的</p>
<p>简单的装箱和拆箱：</p>
<p>泛型数组里给我提供了这样一个便利：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">int</span> n = list.get(i);</span><br></pre></td></tr></table></figure>

<p>其实根据ArrayList的定义，里面存放的是一个个对象，但是为什么往里面可以直接add一基本数据类型呢，从数组里拿出来的为什么是int，而不是integer对象呢？</p>
<p>其实这就是java的自动装箱和拆箱，表面上看，编译器执行的是list.add(3),其实由于自动装箱，编译器执行到这里的时候自动把3转化为Integer.valueOf(3)这是一个静态的构造方法，会返回一个integer对象,打包成一个Integer对象，送进了泛型数组里。同里取出的时候，也会把取出的Integer对象通过intValue()方法转成一个int数据。</p>
<h3 id="五-反射"><a href="#五-反射" class="headerlink" title="五.反射"></a>五.反射</h3><p>Class类对象：</p>
<p><code> Person p = new Person();</code>执行这样一行代码，机器里的操作就是，在文件夹里寻找Person.java,然后javac编译为.class的字节码文件，再通过jvm的类加载器将其加载到堆中，创建一个Class类对象，这个对象不是一般的对象，它所包含的事是类的所有信息，然后通过调用里面的方法new 出一个普通的Person对象，反射主要就是通过获得这样一个Class类对象，可以在运行时检查类、接口、方法和变量等信息，无需知道类的名字，方法名等。还可以在运行时实例化新对象，调用方法以及设置和获取变量值。</p>
<p>java中提供3种方法获取内存中的Class对象</p>
<ol>
<li>Class.forName()方式适用于运行时动态获取Class对象，只需将类名作为forName方法的参数：</li>
<li>类名.class</li>
<li>对象.getClass();</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">				Person p = <span class="keyword">new</span> Person();</span><br><span class="line">				Class class1 = p.getClass();</span><br><span class="line">        Class class2 = Person.class;</span><br><span class="line">        Class class3 = Class.forName(<span class="string">&quot;extend.Person&quot;</span>);</span><br><span class="line"><span class="comment">//			获得类对象</span></span><br><span class="line">        System.out.println(class1);</span><br><span class="line">        System.out.println(class2);</span><br><span class="line">        System.out.println(class3);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>class extend.Person<br>class extend.Person<br>class extend.Person</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">				Class class1 = p.getClass();</span><br><span class="line">        Class class2 = Person.class;</span><br><span class="line">        Class class3 = Class.forName(<span class="string">&quot;extend.Person&quot;</span>);</span><br><span class="line"><span class="comment">//			获得接口</span></span><br><span class="line">        Class[] interfaces= class1.getInterfaces();</span><br><span class="line"><span class="comment">//			获得构造器</span></span><br><span class="line">        Constructor constructor = class1.getConstructor();</span><br><span class="line"><span class="comment">//			获得方法</span></span><br><span class="line">        Method[] methods = class1.getMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method m: methods)&#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(interfaces.length);</span><br><span class="line">        System.out.println(class1.getPackageName());</span><br><span class="line">        System.out.println(constructor);</span><br></pre></td></tr></table></figure>


<blockquote>
<p>public void extend.Person.eat(extend.Food)<br>public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException<br>public final void java.lang.Object.wait() throws java.lang.InterruptedException<br>public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException<br>public boolean java.lang.Object.equals(java.lang.Object)<br>public java.lang.String java.lang.Object.toString()<br>public native int java.lang.Object.hashCode()<br>public final native java.lang.Class java.lang.Object.getClass()<br>public final native void java.lang.Object.notify()<br>public final native void java.lang.Object.notifyAll()<br>0<br>extend<br>public extend.Person()<br>class extend.Person<br>class extend.Person<br>class extend.Person</p>
</blockquote>
<p>除了获得信息，可以看到包括方法，构造器，甚至接口都被我们保存到相应的实例里，我们可以通过调用这些实例来使用方法，构造器等等，反射是很有意思的东西，大家感兴趣可以玩一玩。</p>
<h2 id="第六章-接口，lambda表达式与内部类"><a href="#第六章-接口，lambda表达式与内部类" class="headerlink" title="第六章 接口，lambda表达式与内部类"></a>第六章 接口，lambda表达式与内部类</h2><h3 id="六-接口"><a href="#六-接口" class="headerlink" title="六.接口"></a>六.接口</h3><p>一个类通过实现接口的方式，来实现接口中的各种方法，接口中的默认声明为public abstract（公共抽象的），接口和抽象类一样是不能被实例化的，接口的使用方式就是让其他的类去实现它，或者别的接口继承，其实最后也是要被类实现，进而实现里面的抽象方法</p>
<ul>
<li>一个实现接口的类，必须实现接口的所有抽象方法，否则就要声明为抽象类</li>
<li>接口类型可以用来声明一个变量，他们可以成为一个空指针，或者被绑定为一个实现了此接口的对象</li>
<li>接口中可以定义常量，默认都是（static final），但是不能有实例域</li>
<li>可以用default修饰一个接口的方法，使得这个接口有一个默认实现</li>
</ul>
<p>实现一个接口，就要重写其中的抽象方法，继承一个抽象类，也要实现其中的抽象方法，如果做不到，就要自己声明为抽象类，我们可以简单比较一下抽象类和接口：</p>
<blockquote>
<p>区别一: 抽象类只能单继承,接口能多实现<br>区别二: 抽象类是一个类,可以被任意权限修饰符修饰,静态和非静态属性，final和非final属性，可<br>以有抽象方法和非抽象方法；<br>接口只能被public,final修饰,只能有静态方法,即使没有显示的声明，而且是不可修改的；<br>区别三: 抽象的事物不同:<br>抽象类是对整个类抽象,包括属性,行为；接口是对类的行为(局部)进行抽象；<br>区别四: 定义的时候,定义抽象类和接口的思想不同；<br>设计抽象类是自下而上的过程,我子类需要,所以我定义抽象类；<br>设计接口是自上而下的过程,我接口规范某一行为,我某类需要这个行为,我实现某接口</p>
</blockquote>
<p><strong>接口和回调</strong>：</p>
<p>回调：</p>
<p>书上的例子也挺好，就是用一个计时器，每隔一定时间，发送一事件，然后再通过实现的接口的自定义方法去执行一些操作，书上的例子包装的很好。</p>
<p>类A调用类B的b方法 类B的b方法执行完毕主动调用类A的callback()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallBack</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wakeUp</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//		这里的Customer我们实现了一个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">CallBack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//这个方法就是我们要去执行时，会回来调用callback接口的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderWakeUp</span><span class="params">(Hotel hotel)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;顾客订购叫醒服务！&quot;</span>);</span><br><span class="line">        hotel.goToWakeUp(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wakeUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;顾客被叫醒了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hotel</span> </span>&#123;</span><br><span class="line">  <span class="comment">//通过调用这个方法，回调回之前的对象的方法，核心是这里的参数用接口的声明</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goToWakeUp</span><span class="params">(CallBack callBack)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟时间</span></span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;过了一会……&quot;</span>);</span><br><span class="line">            callBack.wakeUp();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallBackTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        Hotel hotel = <span class="keyword">new</span> Hotel();</span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">        customer.orderWakeUp(hotel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<blockquote>
<p>顾客订购叫醒服务！<br>过了一会……<br>顾客被叫醒了！</p>
</blockquote>
<h3 id="七-lambda表达式"><a href="#七-lambda表达式" class="headerlink" title="七.lambda表达式"></a>七.lambda表达式</h3><p>形式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">( params ) -&gt; expression;<span class="comment">//返回表达式的值</span></span><br><span class="line">( params ) -&gt; statement; <span class="comment">//返回void</span></span><br><span class="line">( params ) -&gt; &#123; statements &#125;;</span><br><span class="line"><span class="comment">//如果代码要完成的计算无法放在一个表达式里面，就可以像写方法一样写在一个&#123;&#125;里，并要包含显示的return语句。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果方法没有参数，也要像方法一样留一个空括号</li>
<li>当lambda表达式只在一些分支返回值，而其他时候不返回，是会报错的</li>
</ul>
<p>自己的理解：lambda表达式的就像是一个包装的方法，没有说明方法的名称和返回类型，但是规定了参数的传入，以及返回的值，整个lambda更像是一个一次性的方法，最后的结果就是箭头后的返回值。</p>
<p><strong>函数式接口</strong>：对于只有一个抽象方法的接口，需要这种接口的对象时，我们可以提供一个lambda 表达式,lambda表达式可以转为接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.eat(<span class="keyword">new</span> Apple());</span><br><span class="line">        p.eat(<span class="keyword">new</span> Banana());</span><br><span class="line">        p.eat(<span class="keyword">new</span> Peach());</span><br><span class="line">        p.eat(<span class="keyword">new</span> Food() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      	p.eat(()-&gt;<span class="string">&quot;lambda...&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<blockquote>
<p>I’m eating Apple<br>I’m eating Banana<br>I’m eating Peach<br>I’m eating unknown<br>I’m eating lambda…</p>
</blockquote>
<p>这里的eat本来是传入一个Food的实例的，但是Food作为一个只有一个抽象方法的接口，刚好可以用lambda书写，只需要注意其抽象方法返回的是String，这样的lambda表达式刚好从一个类似于方法的东西在这里转型为接口使用。</p>
<h3 id="八-内部类"><a href="#八-内部类" class="headerlink" title="八. 内部类"></a>八. 内部类</h3><p>主要分为四类：</p>
<ol>
<li><p>成员内部类（成员内部类不允许存在任何static修饰的变量和方法，正如成员方法中不能有任何静态属性一样（成员方法与对象有关，静态变量与类有关），成员内部类与外部类的实例相联系，可以访问外部类的所有成员数据，正因为成员内部类与外部类的实例联系，因此它不允许在 方法区（Method Area）中申请内存，只能在 堆（Heap）中 申请，所以不能在其内部定义static成员变量，可以理解成内存上的一种包含关系。</p>
<ol>
<li><pre><code class="java">public class Outter &#123;
    String s;
    class Inner&#123;
    &#125;
&#125;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">2. 静态内部类</span><br><span class="line"></span><br><span class="line">   1. 被关键字static修饰的成员内部类就是静态内部类</span><br><span class="line"></span><br><span class="line">   2. 静态内部类的创建不依赖于外部类，而可以直接创建</span><br><span class="line"></span><br><span class="line">   3. 静态内部类不可以使用任何外部类的非static类（包括属性和方法—），但可以自己存在自己的成员变量</span><br><span class="line"></span><br><span class="line">   4. &#96;&#96;&#96;java</span><br><span class="line">      public class Outter &#123;</span><br><span class="line">          String s;</span><br><span class="line">          static class Inner&#123;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ol>
</li>
</ol>
<ol start="3">
<li><p>方法（局部）内部类</p>
<ol>
<li><p>定义在方法内部的一个类，方法内部类不允许使用访问修饰符（别的地方也没有理由可以使用它），因为方法内部类对外部完全隐藏，除了创建这个类的方法可以访问到他，其他都不可以</p>
</li>
<li><p>方法内部类如果要使用形参，该形参就要修饰为final</p>
<ol>
<li>原因：局部变量和局部内部类的生命周期是不一致的，当局部变量所处的函数执行完毕后，就会被销毁，但局部内部类的对象还可能一直存在（若该对象仍然被引用），而当对象要访问该局部变量时，访问的就是不存在的东西了，用final修饰就会将这个局部变量复制一份，并一直保存了这个拷贝每次访问时就能找到这个拷贝。</li>
</ol>
</li>
<li><pre><code class="java">public class Outter &#123;
    public Inner getInner2()&#123;
        class Inner2 extends Inner&#123;
            String s = &quot;Inner2&quot;;
        &#125;
        return new Inner2();
    &#125;
&#125;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4. 匿名内部类</span><br><span class="line"></span><br><span class="line">   1. 用得最多的内部类，一个没有名字的方法内部类，</span><br><span class="line"></span><br><span class="line">   2. 匿名内部类继承一个抽象类，或者实现一个接口</span><br><span class="line"></span><br><span class="line">   3. 匿名内部类没有类名，因此也没有构造方法，不能有静态方法和属性</span><br><span class="line"></span><br><span class="line">   4. &#96;&#96;&#96;java</span><br><span class="line">      p.eat(new Food() &#123;</span><br><span class="line">                  @Override</span><br><span class="line">                  public String getName() &#123;</span><br><span class="line">                      return &quot;unknown&quot;;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>java-集合框架</title>
    <url>/2020/09/10/java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="1-集合"><a href="#1-集合" class="headerlink" title="1. 集合"></a>1. 集合</h1><p>集合可以看作是一个容器，用来储存<strong>对象</strong>信息。我们都知道数组可以用来保存<strong>多个数据或者对象</strong>的，那为什么java中还有着比如<strong>List，Map，Set</strong>这样的集合类呢？说明数组有一定的局限性，比如：</p>
<ul>
<li>数组长度是固定的,不能自动增长<br><code> String[] array3=new String[5];</code>  <code>String[] array=&#123;&quot;hello&quot;,&quot;world&quot;&#125;</code>;<br>无论是动态初始化还是静态初始化，在创建的时候，我们就需要声明数组的大小，这样虚拟机才会分配一个连续的内存空间来存储数组。假如此时我又有了新的数据，但是由于我们的数组已经满了，因此新的数据无法保存，我们只能创建一个更大的数组来保存数组，而无法在原有基础上进行扩展。</li>
<li>其次，我们在数组里保存了很多数据，但是只是单一的数据而已，如果我们需要保存映射的关系，比如<strong>Key-value</strong>关系，那么数组就无法满足我们了。</li>
</ul>
<p>针对这些，java在<code>java.util</code>里提供了集合类。</p>
<a id="more"></a>

<h1 id="2-集合类的基本框架"><a href="#2-集合类的基本框架" class="headerlink" title="2.集合类的基本框架"></a>2.集合类的基本框架</h1><ul>
<li>集合类主要有四种Set,Queue,List,Map</li>
<li>Set表示无序且元素互异的集合，有点像数学里面学到的集合</li>
<li>List表示有序的且集合内元素可重复的集合</li>
<li>Map表示有映射关系的集合</li>
<li>Queue表示队列<br>（队列：一种只允许在<strong>表的前端进行删除操作</strong>且在<strong>表的后端进行插入操作</strong>的线性表。队列遵循先进先出原则（first in first out））<br><img src="https://img-blog.csdnimg.cn/20200626192628335.png" alt="队列单向"><br>他们的基本关系有以下两个图表示：<br><img src="https://img-blog.csdnimg.cn/20200627161605728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYXJtaW5nY2o=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/202006271621555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYXJtaW5nY2o=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h1 id="3-Colloction接口"><a href="#3-Colloction接口" class="headerlink" title="3.Colloction接口"></a>3.Colloction接口</h1>从上面的图可以看到Set，Queue，List都实现了Collection的接口</li>
<li><code>int size();</code> 返回集合中元素的个数</li>
<li><code>boolean isEmpty()</code>判断集合是否为空</li>
<li><code>boolean contains（object o）</code>判断是否存在指定元素</li>
<li><code>Iterator&lt;E&gt; iterator();</code>返回一个Iterator对象，用来遍历集合中的元素</li>
<li><code>Object[] toArray();</code>返回一个包含这个集合所有元素的Object类数组（若集合有序的话，返回的数组是同序的）</li>
<li><code>&lt;T&gt; T[] toArray(T[] a);</code>和前面一个方法作用是一样的，不过返回的是指定的泛型T的一个数组</li>
<li><code> boolean add(E e);</code>向集合添加一个元素</li>
<li><code>boolean remove（Object o)</code>删除指定 的元素，如果包含一个或者多个元素o,则这些元素都会被删除</li>
<li><code>boolean containsAll(Collection&lt;?&gt; c);</code>判断是否包含集合c中的全部元素</li>
</ul>
<p>里面方法很多不一一列举</p>
<h1 id="4-Iterator迭代器"><a href="#4-Iterator迭代器" class="headerlink" title="4.Iterator迭代器"></a>4.Iterator迭代器</h1><ul>
<li>查看Collection接口源码，可以看到<code>public interface Collection&lt;E&gt; extends Iterable&lt;E&gt;</code></li>
<li>实现iterable接口的原因就是为集合类创立一个iterator对象，可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构 ( 迭代器把访问逻辑从不同类型的集合类中抽取出来，从而避免向外部暴露集合的内部结构)<br>Iterator又称为遍历器，通常我们可以通过它来遍历Collecion集合中的元素，但是java中的iterator比较简单，只能单向遍历。</li>
</ul>
<ol>
<li><p>使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。</p>
</li>
<li><p>使用next()获得序列中的下一个元素。</p>
</li>
<li><p>使用hasNext()检查序列中是否还有元素。</p>
</li>
<li><p>使用remove()将迭代器新返回的元素删除。</p>
<h1 id="5-Set集合"><a href="#5-Set集合" class="headerlink" title="5.Set集合"></a>5.Set集合</h1><p>Set是Collection的一个子接口<code>public interface Set&lt;E&gt; extends Collection&lt;E&gt; </code></p>
</li>
</ol>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li>无序，没有前后顺序的分别（这里指添加的时候的顺序），所有的元素没有位置的概念，所有的元素都在集合中。（好比一个罐子里面装东西一样，不分顺序，都装在这个罐子里）</li>
<li>无索引，每个元素没有特定的编号</li>
<li>不可重复，元素只有值的区别，没有位置的区别，如果重复，无法区分。<br><img src="https://img-blog.csdnimg.cn/20200626225253579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYXJtaW5nY2o=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<p>结果<br><img src="https://img-blog.csdnimg.cn/20200626225345534.png" alt="在这里插入图片描述"><br>这就很好的反映了set的无序和互异的特性</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>Set本身和Collection的源码一样，没有什么特别的方法</p>
<h2 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h2><h3 id="1-HashSet"><a href="#1-HashSet" class="headerlink" title="1. HashSet"></a>1. HashSet</h3><ul>
<li>HashSet实现元素有序不重复的机制<blockquote>
<p>HashSet会调用该对象的hashCode（）方法来得到该对象的hashCode值，<br>然后根据该hashCode值决定该对象在hashSet中的存储位置。如果有两个元素通过equals()方法比较返回true,<br>   但它们的hashCode()返回值不相等，HashSet将会把它们存储在不同的位置，依然可以添加成功。<br>   也就是说HashSet集合判断两个元素相等的标准是两个对象通过equals()方法比较相等,并且两个对象的hashCode()方法返回值也相等。</p>
</blockquote>
</li>
</ul>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        HashSet&lt;Person&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="keyword">new</span> Person(<span class="number">10</span>,<span class="string">&quot;abc&quot;</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> Person(<span class="number">10</span>,<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> Person(<span class="number">10</span>,<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(set.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[Person{age=10, name=’abc’}, Person{age=10, name=’a’}, Person{age=10, name=’a’}]</p>
</blockquote>
<p>重写方法hashCode和equals方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了equals方法&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">if</span>(((Person) o).age==person.getAge()&amp;&amp;((Person) o).name==person.getName()) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了hashCode方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">55</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<blockquote>
<p>调用了hashCode方法<br>调用了hashCode方法<br>调用了equals方法<br>调用了hashCode方法<br>调用了equals方法<br>[Person{age=10, name=’abc’}]</p>
</blockquote>
<h3 id="2-LinkedHashSet"><a href="#2-LinkedHashSet" class="headerlink" title="2. LinkedHashSet"></a>2. LinkedHashSet</h3><ul>
<li><p>是Hashet的子类，具有可预知迭代顺序的 Set 接口的哈希表和链接列表实现，即按照将元素插入到 set 中的顺序（插入顺序）进行迭代。</p>
</li>
<li><p>LinkedHashSet集合同样是根据元素的hashCode值来决定元素的存储位置，但是它同时使用链表维护元素的次序。这样使得元素看起 来像是以插入顺序保存的，也就是说，当遍历该集合时候，LinkedHashSet将会以元素的添加顺序访问集合的元素。</p>
</li>
<li><p>LinkedHashSet在迭代访问Set中的全部元素时，性能比HashSet好，但是插入时性能稍微逊色于HashSet。</p>
<h3 id="3-TreeSet"><a href="#3-TreeSet" class="headerlink" title="3. TreeSet"></a>3. TreeSet</h3><p>TreeSet 是一个有序的集合，它的作用是提供有序的Set集合。它继承于AbstractSet抽象类，实现了NavigableSet, Cloneable, java.io.Serializable接口。</p>
</li>
<li><p>TreeSet 继承于AbstractSet，所以它是一个Set集合，具有Set的属性和方法。</p>
</li>
<li><p>TreeSet 实现了NavigableSet接口，意味着它支持一系列的导航方法。比如查找与指定目标最匹配项。</p>
</li>
<li><p>TreeSet 实现了Cloneable接口，意味着它能被克隆。</p>
</li>
<li><p>TreeSet 实现了java.io.Serializable接口，意味着它支持序列化。</p>
</li>
<li><p>TreeSet是基于TreeMap实现的。TreeSet中的元素支持2种排序方式：自然排序 或者 根据创建TreeSet 时提供的 Comparator 进行排序。这取决于使用的构造方法。</p>
</li>
<li><p>TreeSet为基本操作（add、remove 和 contains）提供受保证的 log(n) 时间开销。</p>
</li>
</ul>
<p>简单看看源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 带比较器的构造函数。</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; comparator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;E,Object&gt;(comparator));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回TreeSet的逆序排列的迭代器。</span></span><br><span class="line">  <span class="comment">// 因为TreeSet时TreeMap实现的，所以这里实际上时返回TreeMap的“键集”对应的迭代器</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">descendingIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m.descendingKeySet().iterator();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回Set的比较器</span></span><br><span class="line">  <span class="keyword">public</span> Comparator&lt;? <span class="keyword">super</span> E&gt; comparator() &#123;</span><br><span class="line">      <span class="keyword">return</span> m.comparator();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回Set的第一个元素</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m.firstKey();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回Set的最后一个元素</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">last</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m.lastKey();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回Set中小于e的最大元素</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">lower</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m.lowerKey(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回Set中小于/等于e的最大元素</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">floor</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m.floorKey(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回Set中大于/等于e的最小元素</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">ceiling</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m.ceilingKey(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回Set中大于e的最小元素</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">higher</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m.higherKey(e);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>写了一个简单的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//        构造TreeSet时，传入person的比较年龄的方法</span></span><br><span class="line">        TreeSet&lt;Person&gt; tree=<span class="keyword">new</span> TreeSet&lt;&gt;(Person::compareTo);</span><br><span class="line">        tree.add(<span class="keyword">new</span> Person(<span class="number">10</span>,<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        tree.add(<span class="keyword">new</span> Person(<span class="number">20</span>,<span class="string">&quot;b&quot;</span>));</span><br><span class="line">        tree.add(<span class="keyword">new</span> Person(<span class="number">30</span>,<span class="string">&quot;c&quot;</span>));</span><br><span class="line">        tree.add(<span class="keyword">new</span> Person(<span class="number">40</span>,<span class="string">&quot;d&quot;</span>));</span><br><span class="line"><span class="comment">//        年龄较小，而TreeSet是有序列的，无法放到集合中</span></span><br><span class="line">        tree.add(<span class="keyword">new</span> Person(<span class="number">10</span>,<span class="string">&quot;e&quot;</span>));</span><br><span class="line">        System.out.println(tree);</span><br><span class="line"><span class="comment">//        返回年龄小于30的人里年龄最大的人</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Lower a:&quot;</span>+tree.lower(<span class="keyword">new</span> Person(<span class="number">30</span>,<span class="string">&quot;n&quot;</span>)));</span><br><span class="line"><span class="comment">//        TreeSet不支持快速随机遍历，只能通过迭代器进行遍历</span></span><br><span class="line"><span class="comment">//        可以倒序遍历</span></span><br><span class="line">        Iterator iterator=tree.descendingIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) System.out.println(iterator.next());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>输出的结果：</p>
<blockquote>
<p>[Person{age=10, name=’a’}, Person{age=20, name=’b’}, Person{age=30, name=’c’}, Person{age=40, name=’d’}]<br>Lower a:Person{age=20, name=’b’}<br>Person{age=40, name=’d’}<br>Person{age=30, name=’c’}<br>Person{age=20, name=’b’}<br>Person{age=10, name=’a’}</p>
</blockquote>
<h1 id="6-Queue队列"><a href="#6-Queue队列" class="headerlink" title="6.Queue队列"></a>6.Queue队列</h1><p>继承了Collection接口，方法比较简单，都是针对队列性质的操作</p>
<blockquote>
<p>add(E e):添加一个元素<br>remove():删除一个元素<br>offer(E e):添加一个元素<br>poll(E e):删除一个元素<br>peek():查看最上一个元素<br>element() ：查看最上一个元素,与上面不同的是会在队列为空的时候抛出一个异常</p>
</blockquote>
<h2 id="实现类-PriorityQueue"><a href="#实现类-PriorityQueue" class="headerlink" title="实现类: PriorityQueue"></a>实现类: PriorityQueue</h2><p>PriorityQueue是一个比较标准的队列实现类。之所以说它是比较标准的队列实现，而不是绝对标准的队列实现，是因为PriorityQueue保存队列元素的顺序并不是按加入队列的顺序，而是会按队列元素的大小或指定的比较器进行重新排序(像是二叉树排列)。因此当调用peek()方法或者poll()方法取出队列中的元素时，并不是取出最先进入队列的元素，而是取出队列中最小的元素。这就违反队列的最基本原则：先进先出(FIFO)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        PriorityQueue priorityQueue1=<span class="keyword">new</span> PriorityQueue();</span><br><span class="line">        priorityQueue1.offer(-<span class="number">2</span>);</span><br><span class="line">        priorityQueue1.offer(<span class="number">10</span>);</span><br><span class="line">        priorityQueue1.offer(<span class="number">5</span>);</span><br><span class="line">        priorityQueue1.offer(<span class="number">6</span>);</span><br><span class="line">        priorityQueue1.offer(<span class="number">7</span>);</span><br><span class="line">        priorityQueue1.offer(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(priorityQueue1);</span><br><span class="line">        priorityQueue1.poll();</span><br><span class="line">        System.out.println(priorityQueue1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>[-2, 6, 5, 10, 7, 8]<br>[5, 6, 8, 10, 7]</p>
</blockquote>
<h1 id="7-List列表"><a href="#7-List列表" class="headerlink" title="7.List列表"></a>7.List列表</h1><p>几个Collection接口里没有的方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">E get（<span class="keyword">int</span> index）：返回列表中指定位置的元素。</span><br><span class="line">E set（<span class="keyword">int</span> index，E element）：用指定的元素替换列表中指定位置的元素。</span><br><span class="line">List &lt;E&gt; subList（<span class="keyword">int</span> fromIndex，<span class="keyword">int</span> toIndex）：返回指定fromIndex（包含）和toIndex（不包括）之间的此</span><br><span class="line">列表部分的视图。返回的列表由此列表支持，因此返回列表中的非结构更改将反映在此列表中，反之亦然。</span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> replaceAll（UnaryOperator &lt;E&gt;运算符）：将此列表的每个元素替换为将运算符应用于该元素的结果。</span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> sort（Comparator &lt;<span class="keyword">super</span> E&gt; c）：根据指定的Comparator引发的顺序对此列表进行排序。</span><br><span class="line"><span class="keyword">default</span> Spliterator &lt;E&gt; spliterator（）：在此列表中的元素上创建Spliterator。</span><br></pre></td></tr></table></figure>
<p>有两种方法可以对列表进行排序。我们可以使用Collections类进行自然排序，或者我们可以使用List sort（）方法并使用我们自己的Comparator进行排序</p>
<h2 id="实现类-1"><a href="#实现类-1" class="headerlink" title="实现类"></a>实现类</h2><h3 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1. ArrayList"></a>1. ArrayList</h3><p>底层是基于动态数组，根据下表随机访问数组元素的效率高，向数组尾部添加元素的效率高；但是，删除数组中的数据以及向数组中间添加数据效率低，因为需要移动数组。例如最坏的情况是删除第一个数组元素，则需要将第2至第n个数组元素各向前移动一位。而之所以称为动态数组，是因为Arraylist在数组元素超过其容量大，Arraylist可以进行扩容（针对JDK1.8  数组扩容后的容量是扩容前的1.5倍），Arraylist源码中最大的数组容量是Integer.MAX_VALUE-8</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Increases the capacity to ensure that it can hold at least the</span></span><br><span class="line"><span class="comment">     * number of elements specified by the minimum capacity argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minCapacity the desired minimum capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-LinkedList"><a href="#2-LinkedList" class="headerlink" title="2. LinkedList"></a>2. LinkedList</h3><p>LinkedList底层的数据结构是基于双向链表的，且头结点中不存放数据,如下：<br><img src="https://img-blog.csdnimg.cn/202006271619086.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYXJtaW5nY2o=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>既然是双向链表，那么必定存在一种数据结构——我们可以称之为节点，节点实例保存业务数据，前一个节点的位置信息和后一个节点位置信息，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200627162004574.png" alt="在这里插入图片描述"></p>
<ul>
<li><strong>具体源码</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Pointer to last node.</span></span><br><span class="line"><span class="comment">    * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment">    *            (last.next == null &amp;&amp; last.item != null)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E item;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>节点类很简单，element存放业务数据，prev与next分别存放前后节点的信息.具体的各种方法的实现不详细解释。</p>
<p>LinkedList 和 ArrayList 一样，都实现了 List 接口，但其内部的数据结构有本质的不同。LinkedList 是基于链表实现的（通过名字也能区分开来），所以它的插入和删除操作比 ArrayList 更加高效。但也是由于其为基于链表的，所以随机访问的效率要比 ArrayList 差。</p>
<h1 id="8-Map图"><a href="#8-Map图" class="headerlink" title="8.Map图"></a>8.Map图</h1><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><ul>
<li>给定一个键和一个值，你可以将该值存储在一个Map对象. 之后，你可以通过键来访问对应的值。</li>
<li>当访问的值不存在的时候，方法就会抛出一个NoSuchElementException异常.</li>
<li>当对象的类型和Map里元素类型不兼容的时候，就会抛出一个 ClassCastException异常。</li>
<li>当在不允许使用Null对象的Map中使用Null对象，会抛出一个NullPointerException 异常。</li>
<li>当尝试修改一个只读的Map时，会抛出一个UnsupportedOperationException异常。<h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2>插入元素</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>获取元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.get(<span class="string">&quot;key1&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>移除元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.remove(<span class="string">&quot;key1&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>清空map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.clear();</span><br></pre></td></tr></table></figure>

<h2 id="实现类（内容有点多，下次再写完）"><a href="#实现类（内容有点多，下次再写完）" class="headerlink" title="实现类（内容有点多，下次再写完）"></a>实现类（内容有点多，下次再写完）</h2>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>编程</tag>
      </tags>
  </entry>
</search>
