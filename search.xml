<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java-IO流</title>
    <url>/2020/09/10/Java-IO%E6%B5%81/</url>
    <content><![CDATA[<p>简单介绍java的io流的概念</p>
<h1 id="一、IO概念"><a href="#一、IO概念" class="headerlink" title="一、IO概念"></a>一、IO概念</h1><ul>
<li>I/O就是input和output的缩写，是计算机调度把各个储存中（包括内存和外部储存）的数据写入写出的过程</li>
<li>所谓的外部设备可以包括硬盘文件, 网络设备, 另个程序等. 也就是当前程序之外的数据设备</li>
<li>java中用流（stream）来抽象表示这么一个写入写出的功能，封装成一个类，都放在java.io这个包里面</li>
</ul>
<a id="more"></a>
<h1 id="二、流（stream）的概念"><a href="#二、流（stream）的概念" class="headerlink" title="二、流（stream）的概念"></a>二、流（stream）的概念</h1><ul>
<li>stream（流）是从起源（source）到接收（sink）的有序数据。</li>
<li>如果把输入输出源比作“水桶”的话，“流”就相当于是连接他们的“管道”，这个管道的粗细、单向性等各种属性就是区分不同流的特性，流中的各种方法就是管道上的按钮，用于操作数据的流通。<br><img src="https://img-blog.csdnimg.cn/20200802143851170.jpg" alt="在这里插入图片描述"><h1 id="三、IO流的分类"><a href="#三、IO流的分类" class="headerlink" title="三、IO流的分类"></a>三、IO流的分类</h1><h2 id="1、按照流的方向"><a href="#1、按照流的方向" class="headerlink" title="1、按照流的方向"></a>1、按照流的方向</h2></li>
<li>输入流：只能从中读取数据（主要由InputStream和Reader作为基类）</li>
<li>输出流：只能向其写入数据（主要由OutputStream和Writer作为基类）<h2 id="2、按照流的操作颗粒度划分"><a href="#2、按照流的操作颗粒度划分" class="headerlink" title="2、按照流的操作颗粒度划分"></a>2、按照流的操作颗粒度划分</h2></li>
<li>字节流：以字节为单位，可操作任何数据（主要以InputStream和OutputStream作为基类）</li>
<li>字符流：以字符为单位，只能操作纯字符数据，比较方便（主要以Reader和Writer为基类）<h2 id="3、按照流的角色划分"><a href="#3、按照流的角色划分" class="headerlink" title="3、按照流的角色划分"></a>3、按照流的角色划分</h2></li>
<li>节点流：可以从/向一个特定的IO设备（如磁盘，网络）读/写数据的流，也叫低级流。</li>
<li>处理流：用于对一个已经存在的流进行连接和封装，通过封装后的流实现数据的读/写功能，也叫高级流。<h1 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h1>InputStream是Java标准库提供的最基本的输入流。InputStream是一个抽象类，是所有输入类的超类。这个抽象类定义的最重要的方法就是int read（）这样的一个方法</li>
</ul>
<blockquote>
<p> public abstract int read() throws IOException;<br> 这个方法会读取输入流的下一个字节，并返回字节表示的int值。如果己经&gt;  读到末尾，返回-1，表示不能继续读取了</p>
</blockquote>
<p>FileInputStream是InputStream的一个子类，可以用来从文件中获得数据，下面的代码演示了如何完整读取一个文件的字节：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">      InputStream inputStream&#x3D;new FileInputStream(&quot;src&#x2F;sample.txt&quot;);</span><br><span class="line">        for(;;)&#123;</span><br><span class="line">            int n&#x3D;inputStream.read();</span><br><span class="line">            if(n&#x3D;&#x3D;-1)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>注意：在计算机中，类似文件，网络端口这些资源，都是由操作系统统一管理，应用程序在运行的时候，如果打开了一个文件进行读写，完成后要及时关闭，以便操作系统把资源释放掉，否则，应用程序占用的资源会越来越多，不但白白占用内存还会影响其他应用程序的运行。</p>
<h2 id="1-缓冲"><a href="#1-缓冲" class="headerlink" title="1.缓冲"></a>1.缓冲</h2><p>在读取流的时候，一次读取一个字节并不是最高效的方法。很多流支持一次性读取多个字节到缓冲区，对于文件和网络流来说，利用缓冲区一次性读取多个字节的效率要高很多。InputStream提供两个重载方法来支持读取多个字节：</p>
<blockquote>
<p>int read(byte[] b): 读取若干字节填充到byte[]数组，返回读取的字节数<br>int read(byte[] b,int off,int len): 指定byte[]数组的偏移量和最大填充数</p>
</blockquote>
<p>利用上述方法读取多个字节时需要先定义一个byte[]数组作为缓冲区，read()会尽可能多的读取字节到缓冲区，但不会超过缓冲区容量的大小，read（）的返回值变为实际读取的字节数。若返回-1，则表示没有更多数据了。<br>栗子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException&#123;</span><br><span class="line">      InputStream inputStream&#x3D;new FileInputStream(&quot;src&#x2F;sample.txt&quot;);</span><br><span class="line">        byte[] butter&#x3D;new byte[5];</span><br><span class="line">        int n;</span><br><span class="line">        while((n&#x3D;inputStream.read(butter))!&#x3D;-1)&#123;</span><br><span class="line">            System.out.println(&quot;read&quot;+n+&quot;bytes\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-阻塞"><a href="#2-阻塞" class="headerlink" title="2.阻塞"></a>2.阻塞</h2><p>在调用InputStream的read()方法时，我们说它是阻塞的</p>
<blockquote>
<p>int n;<br>n=inputStream.read();<br>m=n;</p>
</blockquote>
<p>执行到第二行时，必须等read（）方法返回后才可以继续。因为读取IO流比普通代码速度要慢很多，无法确定read（）方法到底要花费多长时间，所以它是阻塞的。</p>
<h1 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h1><p>和InputStream相反，OutputStream是Java库中提供的最基本的输出流。<br>和InputStream类似，OutputStream也是抽象类，它是所有输出流的超类。这个抽象类定义的最重要的方法是void write(int b):</p>
<blockquote>
<p> public abstract void write(int b) throws IOException;</p>
</blockquote>
<p>这个方法会写入一个字节到输出流。要注意，虽然传入的是int类型的参数，但只会写入一个字节，即只写入int最低8位表示字节的部分。</p>
<ul>
<li>和InputStream一样，也有close（）方法，write（）也是阻塞的</li>
<li>OutputStream还提供了一个flush()方法，它的作用是将缓冲区的内容真正输入到目的地。</li>
</ul>
<p>为什么要有flush()方法？因为向网络、磁盘写入数据的时候，出于效率考虑，操作系统并不是输出一个字节就立马写入到文件或发送到网络，而是把输出的字节先放到内存的一个缓冲区（本质上也是一个byte[]数组），等到缓冲区写满，在一次性发送。对于很多IO设备，一次性写一个字节和一次性写1000个字节花费的时间几乎是一样的，所以这个flush方法的存在，就是强制把缓冲区的flush输出。</p>
<p>以FileOutputStream为例，演示将若干字节写入文件流：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line"> OutputStream outputStream &#x3D; new FileOutputStream(&quot;src&#x2F;sample.txt&quot;);</span><br><span class="line">        outputStream.write(108);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="Filter模式"><a href="#Filter模式" class="headerlink" title="Filter模式"></a>Filter模式</h1><ul>
<li>如果我们要给一个FileInputStream添加缓冲功能，则可以从FileInputStream派生出一个类<blockquote>
<p>BufferedFileInputStream extends FileInputstream</p>
</blockquote>
</li>
<li>如果我们要给一个FileInputStream添加计算签名功能，则可以派生一个类<blockquote>
<p>DigestFileInputStream extends FileInputstream</p>
</blockquote>
</li>
<li>若要添加加密解密功能，还可以派生一个类<blockquote>
<p>CipherFileInputStream extends FileInputstream</p>
</blockquote>
</li>
</ul>
<p>如果要给一个FileInputStream添加以上三种功能，用继承的方法实现的话，子类会比较多，实现的功能越多，子类就越复杂。因此直接使用继承的方法，为InputStream添加很多功能，根本无法控制代码的复杂度。</p>
<p>为了解决依赖继承导致子类数量失控的问题，JDK首先将InputStream分成两大类：</p>
<ol>
<li>直接提供数据的基础InputStream，例如<ul>
<li>FileInputStream</li>
<li>ByteArrayInputStream</li>
</ul>
</li>
<li>提供额外附加功能的InputStream。例如</li>
</ol>
<ul>
<li>BufferedInputStream</li>
<li>DigestInputStream</li>
</ul>
<p>当我们给一个基础的的InputStream附加各种功能时，我们先确定这个提供数据源的InputStream，即第一类Inputstream<br>例如：</p>
<blockquote>
<p>Inputstream file= new FileInputStream(“test.gz”);</p>
</blockquote>
<p>紧接着我们希望FileInputStream能提供缓冲的功能来提高读取效率，因此我们可以用BufferedInputStream来包装这个InputStream，得到的包装类型是BufferedInputStream，他仍可视为InputStream：</p>
<blockquote>
<p>InputStream buffered= new BufferedInputStream(file);</p>
</blockquote>
<p>无论包装了多少次，得到的对象始终是InputStream，我们zhijieyongInputStream来引用它，皆可以正常读取。</p>
<p>同理，OutputStream也是如此，这样的一种通过一个基础组件再叠加各种“附加”功能组件的模式，就叫做Filter模式。</p>
<h1 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h1><p>Reader是Java IO库提供的另一个输入流接口。和InputStream的区别是，Reader是一个字符流，以char为单位读取，而后者是一个字节流，以byte为单位。<br>|InputStream| Reader |<br>|–|–|<br>|字节流，byte  | 字符流，char |<br>|读取字节（-1，0<del>255):int read()|读取字符（-1，0</del>65535):int read()|<br>Reader定义了所有字符输入流的超类：</p>
<ul>
<li>FileReader实现了文字字符流的输入，使用时注意制定编码</li>
<li>CharArrayReader和StringReader可以在内存中模拟一个字符流输入</li>
</ul>
<p>Reader 是基于inputStream构造的：可以通过InPutStreanReader在制定编码的同时讲一个InputStream转化为Reader。</p>
<blockquote>
<p>Reader reader=new InputStreamReader(new FileInPutstream(“文件名路径”，“编码”));</p>
</blockquote>
<h1 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h1><p>Writer和OutputStream的联系与上面Reader差不多，不再赘述。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>java-堆栈</title>
    <url>/2020/10/02/java-%E5%A0%86%E6%A0%88/</url>
    <content><![CDATA[<p>java堆栈的学习</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>java-类加载机制</title>
    <url>/2020/10/10/java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="一、什么是java的类加载"><a href="#一、什么是java的类加载" class="headerlink" title="一、什么是java的类加载"></a>一、什么是java的类加载</h1><p>一个Java文件从编码完成到最终执行，一般主要包括两个过程</p>
<ul>
<li>编译</li>
<li>运行</li>
</ul>
<p><strong>编译</strong>，即把我们写好的java文件，通过javac命令编译成字节码，也就是我们常说的.class文件。</p>
<p><strong>运行</strong>，则是把编译生成的.class文件交给Java虚拟机(JVM)执行。</p>
<p>而我们所说的类加载过程即是指JVM虚拟机把.class文件中类信息加载进内存，并进行解析生成对应的class对象的过程。而这个类对象会包含成员变量、构造方法、成语方法等信息。</p>
<a id="more"></a>

<p><img src="https://user-gold-cdn.xitu.io/2018/2/12/1618814efa703be5?imageslim"></p>
<p>Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的加载机制。* .class文件由类装载器装载后，在JVM中将形成一份描述Class结构的元信息对象（类对象），通过该元信息对象可以获知Class的结构信息：如构造函数，属性和方法等。</p>
<p><strong>举例</strong>： JVM在执行某段代码时，遇到了class A， 然而此时内存中并没有class A的相关信息，于是JVM就会到相应的class文件中去寻找class A的类信息，并加载进内存中，这就是我们所说的类加载过程。并且这种加载的操作只会进行一次</p>
<h1 id="二、java类加载的流程"><a href="#二、java类加载的流程" class="headerlink" title="二、java类加载的流程"></a>二、java类加载的流程</h1><p><img src="https://user-gold-cdn.xitu.io/2018/2/12/1618817ff24341a3?imageslim"></p>
<h3 id="1-加载"><a href="#1-加载" class="headerlink" title="1.加载"></a>1.加载</h3><p>加载指的是把class字节码文件从各个来源通过类加载器装载入内存中。并为之创建一个java.lang.class对象。</p>
<p><img src="https://i.loli.net/2020/10/10/O3wGhyU8QIZFPsn.png" alt="84873221AC165DF03B0B6AA89CF31BFE.png"></p>
<ul>
<li><strong>字节码文件来源</strong>：一般的加载来源包括从本地路径下编译生成的.class文件，从jar包中的.class文件，从远程网络，以及动态代理实时编译</li>
<li><strong>类加载器</strong>：一般包括<strong>启动类加载器</strong>，<strong>扩展类加载器</strong>，<strong>应用类加载器</strong>，以及用户的<strong>自定义类加载器</strong>。</li>
</ul>
<ol>
<li><p>启动类加载器（Bootstrap ClassLoader）：负责加载JAVA_HOME\lib目录中并且能被虚拟机识别的类库到JVM内存中，如果名称不符合的类库即使放在lib目录中也不会被加载。该类加载器无法被Java程序直接引用。</p>
</li>
<li><p>扩展类加载器（Extension ClassLoader）：该加载器主要是负责加载JAVA_HOME\lib\，该加载器可以被开发者直接使用。</p>
</li>
<li><p>应用程序类加载器（Application ClassLoader）：该类加载器也称为系统类加载器，它负责加载用户类路径（Classpath）上所指定的类库，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p>
</li>
<li><p>自定义类加载器：若要实现自定义类加载器，只需要继承java.lang.ClassLoader 类，并且重写其findClass()方法即可。java.lang.ClassLoader 类的基本职责就是根据一个指定的类的名称，找到或者生成其对应的字节代码，然后从这些字节代码中定义出一个 Java 类，即 java.lang.Class 类的一个实例。</p>
</li>
</ol>
<p><strong>结论</strong>：加载阶段，虚拟机需要完成以下三件事情：</p>
<ol>
<li><p>通过一个类的全限定名来获取其定义的二进制字节流。</p>
</li>
<li><p>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>
</li>
<li><p>在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。</p>
</li>
</ol>
<h2 id="2-验证"><a href="#2-验证" class="headerlink" title="2.验证"></a><strong>2.验证</strong></h2><p>主要是为了保证加载进来的字节流符合虚拟机规范，不会造成安全错误。</p>
<p>包括对于<strong>文件格式的验证</strong>，比如常量中是否有不被支持的常量？文件中是否有不规范的或者附加的其他信息？</p>
<p>对于<strong>元数据的验证</strong>，比如该类是否继承了被final修饰的类？类中的字段，方法是否与父类冲突？是否出现了不合理的重载？</p>
<p>对于<strong>字节码的验证</strong>，保证程序语义的合理性，比如要保证类型转换的合理性。</p>
<p>对于<strong>符号引用的验证</strong>，比如校验符号引用中通过全限定名是否能够找到对应的类？校验符号引用中的访问性（private，public等）是否可被当前类访问？</p>
<h2 id="3-准备"><a href="#3-准备" class="headerlink" title="3.准备"></a><strong>3.准备</strong></h2><p>主要是为类变量（静态变量）（注意，不是实例变量）分配内存，并且赋予<strong>初值</strong>。</p>
<p>特别需要注意，<strong>初值，不是代码中具体写的初始化的值</strong>，而是Java虚拟机根据不同变量类型的默认初始值。</p>
<p>比如8种<strong>基本类型</strong>的初值，默认为0；<strong>引用类型</strong>的初值则为null；<strong>常量</strong>的初值即为代码中设置的值，final static tmp = 456， 那么该阶段tmp的初值就是456。</p>
<h2 id="4-解析"><a href="#4-解析" class="headerlink" title="4.解析"></a><strong>4.解析</strong></h2><p>将常量池内的符号引用替换为直接引用的过程。</p>
<ul>
<li><strong>符号引用</strong>。即一个字符串，但是这个字符串给出了一些能够唯一性识别一个方法，一个变量，一个类的相关信息。</li>
<li><strong>直接引用</strong>。可以理解为一个内存地址，或者一个偏移量。比如<strong>类方法，类变量</strong>的直接引用是指向方法区的<strong>指针</strong>；而<strong>实例方法，实例变量</strong>的直接引用则是从实例的头指针开始算起到这个实例变量位置的<strong>偏移量</strong></li>
</ul>
<p>举个例子来说，现在调用方法hello()，这个方法的地址是1234567，那么hello就是符号引用，1234567就是直接引用。</p>
<p>在解析阶段，虚拟机会把所有的类名，方法名，字段名这些符号引用替换为具体的内存地址或偏移量，也就是直接引用。</p>
<h2 id="5-初始化"><a href="#5-初始化" class="headerlink" title="5.初始化"></a><strong>5.初始化</strong></h2><p>这个阶段主要是对<strong>类变量</strong>初始化，是执行类构造器的过程。</p>
<p>换句话说，只对static修饰的变量或语句进行初始化。</p>
<p>如果初始化一个类的时候，其父类尚未初始化，则优先初始化其父类。</p>
<p>如果同时包含多个静态变量和静态代码块，则按照自上而下的顺序依次执行。</p>
<p>JVM初始化执行<strong>构造器方法</strong>的过程：</p>
<p>1）类构造器方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序所决定。</p>
<p>2）类构造器方法与类的构造函数不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的类构造器方法执行之前，父类的类构造器方法已经执行完毕，因此在虚拟机中第一个执行的类构造器方法的类一定是java.lang.Object。</p>
<p>3）由于父类的类构造器方法方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作。</p>
<p>4）类构造器方法对于类或者接口来说并不是必需的，如果一个类中没有静态语句块也没有对变量的赋值操作，那么编译器可以不为这个类生成类构造器方法。</p>
<p>5）接口中可能会有变量赋值操作，因此接口也会生成类构造器方法。但是接口与类不同，执行接口的类构造器方法不需要先执行父接口的类构造器方法。只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也不会执行接口的类构造器方法。</p>
<p>6）虚拟机会保证一个类的类构造器方法在多线程环境中被正确地加锁和同步。如果有多个线程去同时初始化一个类，那么只会有一个线程去执行这个类的类构造器方法，其它线程都需要阻塞等待，直到活动线程执行类构造器方法完毕。如果在一个类的类构造器方法中有耗时很长的操作，那么就可能造成多个进程阻塞。</p>
<h2 id="三、什么时候开始类的初始化"><a href="#三、什么时候开始类的初始化" class="headerlink" title="三、什么时候开始类的初始化"></a>三、什么时候开始类的初始化</h2><p>什么情况下需要开始类加载过程的第一个阶段:”加载”。虚拟机规范中并没强行约束，这点可以交给虚拟机的的具体实现自由把握，但是对于初始化阶段虚拟机规范是严格规定了如下几种情况，如果类未初始化会对类进行初始化。</p>
<p>1、创建类的实例</p>
<p>2、访问类的静态变量(除常量【被final修辞的静态变量】)</p>
<p>3、访问类的静态方法</p>
<p>4、反射如(Class.forName(“my.xyz.Test”))</p>
<p>5、当初始化一个类时，发现其父类还未初始化，则先出发父类的初始化</p>
<p>6、虚拟机启动时，定义了main()方法的那个类先初始化</p>
<h2 id="四、简单分析"><a href="#四、简单分析" class="headerlink" title="四、简单分析"></a>四、简单分析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTon singleTon = <span class="keyword">new</span> SingleTon();  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count1;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count2 = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        count1++;  </span><br><span class="line">        count2++;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> singleTon;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        SingleTon singleTon = SingleTon.getInstance();  </span><br><span class="line">        System.out.println(<span class="string">&quot;count1=&quot;</span> + singleTon.count1);  </span><br><span class="line">        System.out.println(<span class="string">&quot;count2=&quot;</span> + singleTon.count2);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1:SingleTon singleTon = SingleTon.getInstance();调用了类的SingleTon调用了类的静态方法，触发类的初始化</p>
<p>2:类加载的时候在准备过程中为类的静态变量分配内存并初始化默认值 singleton=null count1=0,count2=0</p>
<p>3:类初始化化，为类的静态变量赋值和执行静态代码快。singleton赋值为new SingleTon()调用类的构造方法</p>
<p>4:调用类的构造方法后count=1;count2=1</p>
<p>5:继续为count1与count2赋值,此时count1没有赋值操作,所有count1为1,但是count2执行赋值操作就变为0。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>java-集合框架</title>
    <url>/2020/09/10/java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="1-集合"><a href="#1-集合" class="headerlink" title="1. 集合"></a>1. 集合</h1><p>集合可以看作是一个容器，用来储存<strong>对象</strong>信息。我们都知道数组可以用来保存<strong>多个数据或者对象</strong>的，那为什么java中还有着比如<strong>List，Map，Set</strong>这样的集合类呢？说明数组有一定的局限性，比如：</p>
<ul>
<li>数组长度是固定的,不能自动增长<br><code> String[] array3=new String[5];</code>  <code>String[] array=&#123;&quot;hello&quot;,&quot;world&quot;&#125;</code>;<br>无论是动态初始化还是静态初始化，在创建的时候，我们就需要声明数组的大小，这样虚拟机才会分配一个连续的内存空间来存储数组。假如此时我又有了新的数据，但是由于我们的数组已经满了，因此新的数据无法保存，我们只能创建一个更大的数组来保存数组，而无法在原有基础上进行扩展。</li>
<li>其次，我们在数组里保存了很多数据，但是只是单一的数据而已，如果我们需要保存映射的关系，比如<strong>Key-value</strong>关系，那么数组就无法满足我们了。</li>
</ul>
<p>针对这些，java在<code>java.util</code>里提供了集合类。</p>
<a id="more"></a>

<h1 id="2-集合类的基本框架"><a href="#2-集合类的基本框架" class="headerlink" title="2.集合类的基本框架"></a>2.集合类的基本框架</h1><ul>
<li>集合类主要有四种Set,Queue,List,Map</li>
<li>Set表示无序且元素互异的集合，有点像数学里面学到的集合</li>
<li>List表示有序的且集合内元素可重复的集合</li>
<li>Map表示有映射关系的集合</li>
<li>Queue表示队列<br>（队列：一种只允许在<strong>表的前端进行删除操作</strong>且在<strong>表的后端进行插入操作</strong>的线性表。队列遵循先进先出原则（first in first out））<br><img src="https://img-blog.csdnimg.cn/20200626192628335.png" alt="队列单向"><br>他们的基本关系有以下两个图表示：<br><img src="https://img-blog.csdnimg.cn/20200627161605728.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYXJtaW5nY2o=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/202006271621555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYXJtaW5nY2o=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h1 id="3-Colloction接口"><a href="#3-Colloction接口" class="headerlink" title="3.Colloction接口"></a>3.Colloction接口</h1>从上面的图可以看到Set，Queue，List都实现了Collection的接口</li>
<li><code>int size();</code> 返回集合中元素的个数</li>
<li><code>boolean isEmpty()</code>判断集合是否为空</li>
<li><code>boolean contains（object o）</code>判断是否存在指定元素</li>
<li><code>Iterator&lt;E&gt; iterator();</code>返回一个Iterator对象，用来遍历集合中的元素</li>
<li><code>Object[] toArray();</code>返回一个包含这个集合所有元素的Object类数组（若集合有序的话，返回的数组是同序的）</li>
<li><code>&lt;T&gt; T[] toArray(T[] a);</code>和前面一个方法作用是一样的，不过返回的是指定的泛型T的一个数组</li>
<li><code> boolean add(E e);</code>向集合添加一个元素</li>
<li><code>boolean remove（Object o)</code>删除指定 的元素，如果包含一个或者多个元素o,则这些元素都会被删除</li>
<li><code>boolean containsAll(Collection&lt;?&gt; c);</code>判断是否包含集合c中的全部元素</li>
</ul>
<p>里面方法很多不一一列举</p>
<h1 id="4-Iterator迭代器"><a href="#4-Iterator迭代器" class="headerlink" title="4.Iterator迭代器"></a>4.Iterator迭代器</h1><ul>
<li>查看Collection接口源码，可以看到<code>public interface Collection&lt;E&gt; extends Iterable&lt;E&gt;</code></li>
<li>实现iterable接口的原因就是为集合类创立一个iterator对象，可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构 ( 迭代器把访问逻辑从不同类型的集合类中抽取出来，从而避免向外部暴露集合的内部结构)<br>Iterator又称为遍历器，通常我们可以通过它来遍历Collecion集合中的元素，但是java中的iterator比较简单，只能单向遍历。</li>
</ul>
<ol>
<li><p>使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。</p>
</li>
<li><p>使用next()获得序列中的下一个元素。</p>
</li>
<li><p>使用hasNext()检查序列中是否还有元素。</p>
</li>
<li><p>使用remove()将迭代器新返回的元素删除。</p>
<h1 id="5-Set集合"><a href="#5-Set集合" class="headerlink" title="5.Set集合"></a>5.Set集合</h1><p>Set是Collection的一个子接口<code>public interface Set&lt;E&gt; extends Collection&lt;E&gt; </code></p>
</li>
</ol>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li>无序，没有前后顺序的分别（这里指添加的时候的顺序），所有的元素没有位置的概念，所有的元素都在集合中。（好比一个罐子里面装东西一样，不分顺序，都装在这个罐子里）</li>
<li>无索引，每个元素没有特定的编号</li>
<li>不可重复，元素只有值的区别，没有位置的区别，如果重复，无法区分。<br><img src="https://img-blog.csdnimg.cn/20200626225253579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYXJtaW5nY2o=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<p>结果<br><img src="https://img-blog.csdnimg.cn/20200626225345534.png" alt="在这里插入图片描述"><br>这就很好的反映了set的无序和互异的特性</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>Set本身和Collection的源码一样，没有什么特别的方法</p>
<h2 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h2><h3 id="1-HashSet"><a href="#1-HashSet" class="headerlink" title="1. HashSet"></a>1. HashSet</h3><ul>
<li>HashSet实现元素有序不重复的机制<blockquote>
<p>HashSet会调用该对象的hashCode（）方法来得到该对象的hashCode值，<br>然后根据该hashCode值决定该对象在hashSet中的存储位置。如果有两个元素通过equals()方法比较返回true,<br>   但它们的hashCode()返回值不相等，HashSet将会把它们存储在不同的位置，依然可以添加成功。<br>   也就是说HashSet集合判断两个元素相等的标准是两个对象通过equals()方法比较相等,并且两个对象的hashCode()方法返回值也相等。</p>
</blockquote>
</li>
</ul>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        HashSet&lt;Person&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="keyword">new</span> Person(<span class="number">10</span>,<span class="string">&quot;abc&quot;</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> Person(<span class="number">10</span>,<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> Person(<span class="number">10</span>,<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(set.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>[Person{age=10, name=’abc’}, Person{age=10, name=’a’}, Person{age=10, name=’a’}]</p>
</blockquote>
<p>重写方法hashCode和equals方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了equals方法&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">if</span>(((Person) o).age==person.getAge()&amp;&amp;((Person) o).name==person.getName()) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了hashCode方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">55</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<blockquote>
<p>调用了hashCode方法<br>调用了hashCode方法<br>调用了equals方法<br>调用了hashCode方法<br>调用了equals方法<br>[Person{age=10, name=’abc’}]</p>
</blockquote>
<h3 id="2-LinkedHashSet"><a href="#2-LinkedHashSet" class="headerlink" title="2. LinkedHashSet"></a>2. LinkedHashSet</h3><ul>
<li><p>是Hashet的子类，具有可预知迭代顺序的 Set 接口的哈希表和链接列表实现，即按照将元素插入到 set 中的顺序（插入顺序）进行迭代。</p>
</li>
<li><p>LinkedHashSet集合同样是根据元素的hashCode值来决定元素的存储位置，但是它同时使用链表维护元素的次序。这样使得元素看起 来像是以插入顺序保存的，也就是说，当遍历该集合时候，LinkedHashSet将会以元素的添加顺序访问集合的元素。</p>
</li>
<li><p>LinkedHashSet在迭代访问Set中的全部元素时，性能比HashSet好，但是插入时性能稍微逊色于HashSet。</p>
<h3 id="3-TreeSet"><a href="#3-TreeSet" class="headerlink" title="3. TreeSet"></a>3. TreeSet</h3><p>TreeSet 是一个有序的集合，它的作用是提供有序的Set集合。它继承于AbstractSet抽象类，实现了NavigableSet, Cloneable, java.io.Serializable接口。</p>
</li>
<li><p>TreeSet 继承于AbstractSet，所以它是一个Set集合，具有Set的属性和方法。</p>
</li>
<li><p>TreeSet 实现了NavigableSet接口，意味着它支持一系列的导航方法。比如查找与指定目标最匹配项。</p>
</li>
<li><p>TreeSet 实现了Cloneable接口，意味着它能被克隆。</p>
</li>
<li><p>TreeSet 实现了java.io.Serializable接口，意味着它支持序列化。</p>
</li>
<li><p>TreeSet是基于TreeMap实现的。TreeSet中的元素支持2种排序方式：自然排序 或者 根据创建TreeSet 时提供的 Comparator 进行排序。这取决于使用的构造方法。</p>
</li>
<li><p>TreeSet为基本操作（add、remove 和 contains）提供受保证的 log(n) 时间开销。</p>
</li>
</ul>
<p>简单看看源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 带比较器的构造函数。</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; comparator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;E,Object&gt;(comparator));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回TreeSet的逆序排列的迭代器。</span></span><br><span class="line">  <span class="comment">// 因为TreeSet时TreeMap实现的，所以这里实际上时返回TreeMap的“键集”对应的迭代器</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">descendingIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m.descendingKeySet().iterator();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回Set的比较器</span></span><br><span class="line">  <span class="keyword">public</span> Comparator&lt;? <span class="keyword">super</span> E&gt; comparator() &#123;</span><br><span class="line">      <span class="keyword">return</span> m.comparator();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回Set的第一个元素</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m.firstKey();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回Set的最后一个元素</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">last</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m.lastKey();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回Set中小于e的最大元素</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">lower</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m.lowerKey(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回Set中小于/等于e的最大元素</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">floor</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m.floorKey(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回Set中大于/等于e的最小元素</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">ceiling</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m.ceilingKey(e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回Set中大于e的最小元素</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">higher</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m.higherKey(e);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>写了一个简单的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//        构造TreeSet时，传入person的比较年龄的方法</span></span><br><span class="line">        TreeSet&lt;Person&gt; tree=<span class="keyword">new</span> TreeSet&lt;&gt;(Person::compareTo);</span><br><span class="line">        tree.add(<span class="keyword">new</span> Person(<span class="number">10</span>,<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        tree.add(<span class="keyword">new</span> Person(<span class="number">20</span>,<span class="string">&quot;b&quot;</span>));</span><br><span class="line">        tree.add(<span class="keyword">new</span> Person(<span class="number">30</span>,<span class="string">&quot;c&quot;</span>));</span><br><span class="line">        tree.add(<span class="keyword">new</span> Person(<span class="number">40</span>,<span class="string">&quot;d&quot;</span>));</span><br><span class="line"><span class="comment">//        年龄较小，而TreeSet是有序列的，无法放到集合中</span></span><br><span class="line">        tree.add(<span class="keyword">new</span> Person(<span class="number">10</span>,<span class="string">&quot;e&quot;</span>));</span><br><span class="line">        System.out.println(tree);</span><br><span class="line"><span class="comment">//        返回年龄小于30的人里年龄最大的人</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Lower a:&quot;</span>+tree.lower(<span class="keyword">new</span> Person(<span class="number">30</span>,<span class="string">&quot;n&quot;</span>)));</span><br><span class="line"><span class="comment">//        TreeSet不支持快速随机遍历，只能通过迭代器进行遍历</span></span><br><span class="line"><span class="comment">//        可以倒序遍历</span></span><br><span class="line">        Iterator iterator=tree.descendingIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) System.out.println(iterator.next());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>输出的结果：</p>
<blockquote>
<p>[Person{age=10, name=’a’}, Person{age=20, name=’b’}, Person{age=30, name=’c’}, Person{age=40, name=’d’}]<br>Lower a:Person{age=20, name=’b’}<br>Person{age=40, name=’d’}<br>Person{age=30, name=’c’}<br>Person{age=20, name=’b’}<br>Person{age=10, name=’a’}</p>
</blockquote>
<h1 id="6-Queue队列"><a href="#6-Queue队列" class="headerlink" title="6.Queue队列"></a>6.Queue队列</h1><p>继承了Collection接口，方法比较简单，都是针对队列性质的操作</p>
<blockquote>
<p>add(E e):添加一个元素<br>remove():删除一个元素<br>offer(E e):添加一个元素<br>poll(E e):删除一个元素<br>peek():查看最上一个元素<br>element() ：查看最上一个元素,与上面不同的是会在队列为空的时候抛出一个异常</p>
</blockquote>
<h2 id="实现类-PriorityQueue"><a href="#实现类-PriorityQueue" class="headerlink" title="实现类: PriorityQueue"></a>实现类: PriorityQueue</h2><p>PriorityQueue是一个比较标准的队列实现类。之所以说它是比较标准的队列实现，而不是绝对标准的队列实现，是因为PriorityQueue保存队列元素的顺序并不是按加入队列的顺序，而是会按队列元素的大小或指定的比较器进行重新排序(像是二叉树排列)。因此当调用peek()方法或者poll()方法取出队列中的元素时，并不是取出最先进入队列的元素，而是取出队列中最小的元素。这就违反队列的最基本原则：先进先出(FIFO)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        PriorityQueue priorityQueue1=<span class="keyword">new</span> PriorityQueue();</span><br><span class="line">        priorityQueue1.offer(-<span class="number">2</span>);</span><br><span class="line">        priorityQueue1.offer(<span class="number">10</span>);</span><br><span class="line">        priorityQueue1.offer(<span class="number">5</span>);</span><br><span class="line">        priorityQueue1.offer(<span class="number">6</span>);</span><br><span class="line">        priorityQueue1.offer(<span class="number">7</span>);</span><br><span class="line">        priorityQueue1.offer(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(priorityQueue1);</span><br><span class="line">        priorityQueue1.poll();</span><br><span class="line">        System.out.println(priorityQueue1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>[-2, 6, 5, 10, 7, 8]<br>[5, 6, 8, 10, 7]</p>
</blockquote>
<h1 id="7-List列表"><a href="#7-List列表" class="headerlink" title="7.List列表"></a>7.List列表</h1><p>几个Collection接口里没有的方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">E get（<span class="keyword">int</span> index）：返回列表中指定位置的元素。</span><br><span class="line">E set（<span class="keyword">int</span> index，E element）：用指定的元素替换列表中指定位置的元素。</span><br><span class="line">List &lt;E&gt; subList（<span class="keyword">int</span> fromIndex，<span class="keyword">int</span> toIndex）：返回指定fromIndex（包含）和toIndex（不包括）之间的此</span><br><span class="line">列表部分的视图。返回的列表由此列表支持，因此返回列表中的非结构更改将反映在此列表中，反之亦然。</span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> replaceAll（UnaryOperator &lt;E&gt;运算符）：将此列表的每个元素替换为将运算符应用于该元素的结果。</span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> sort（Comparator &lt;<span class="keyword">super</span> E&gt; c）：根据指定的Comparator引发的顺序对此列表进行排序。</span><br><span class="line"><span class="keyword">default</span> Spliterator &lt;E&gt; spliterator（）：在此列表中的元素上创建Spliterator。</span><br></pre></td></tr></table></figure>
<p>有两种方法可以对列表进行排序。我们可以使用Collections类进行自然排序，或者我们可以使用List sort（）方法并使用我们自己的Comparator进行排序</p>
<h2 id="实现类-1"><a href="#实现类-1" class="headerlink" title="实现类"></a>实现类</h2><h3 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1. ArrayList"></a>1. ArrayList</h3><p>底层是基于动态数组，根据下表随机访问数组元素的效率高，向数组尾部添加元素的效率高；但是，删除数组中的数据以及向数组中间添加数据效率低，因为需要移动数组。例如最坏的情况是删除第一个数组元素，则需要将第2至第n个数组元素各向前移动一位。而之所以称为动态数组，是因为Arraylist在数组元素超过其容量大，Arraylist可以进行扩容（针对JDK1.8  数组扩容后的容量是扩容前的1.5倍），Arraylist源码中最大的数组容量是Integer.MAX_VALUE-8</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Increases the capacity to ensure that it can hold at least the</span></span><br><span class="line"><span class="comment">     * number of elements specified by the minimum capacity argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minCapacity the desired minimum capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-LinkedList"><a href="#2-LinkedList" class="headerlink" title="2. LinkedList"></a>2. LinkedList</h3><p>LinkedList底层的数据结构是基于双向链表的，且头结点中不存放数据,如下：<br><img src="https://img-blog.csdnimg.cn/202006271619086.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYXJtaW5nY2o=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>既然是双向链表，那么必定存在一种数据结构——我们可以称之为节点，节点实例保存业务数据，前一个节点的位置信息和后一个节点位置信息，如下图所示：<br><img src="https://img-blog.csdnimg.cn/20200627162004574.png" alt="在这里插入图片描述"></p>
<ul>
<li><strong>具体源码</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Pointer to last node.</span></span><br><span class="line"><span class="comment">    * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment">    *            (last.next == null &amp;&amp; last.item != null)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E item;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>节点类很简单，element存放业务数据，prev与next分别存放前后节点的信息.具体的各种方法的实现不详细解释。</p>
<p>LinkedList 和 ArrayList 一样，都实现了 List 接口，但其内部的数据结构有本质的不同。LinkedList 是基于链表实现的（通过名字也能区分开来），所以它的插入和删除操作比 ArrayList 更加高效。但也是由于其为基于链表的，所以随机访问的效率要比 ArrayList 差。</p>
<h1 id="8-Map图"><a href="#8-Map图" class="headerlink" title="8.Map图"></a>8.Map图</h1><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><ul>
<li>给定一个键和一个值，你可以将该值存储在一个Map对象. 之后，你可以通过键来访问对应的值。</li>
<li>当访问的值不存在的时候，方法就会抛出一个NoSuchElementException异常.</li>
<li>当对象的类型和Map里元素类型不兼容的时候，就会抛出一个 ClassCastException异常。</li>
<li>当在不允许使用Null对象的Map中使用Null对象，会抛出一个NullPointerException 异常。</li>
<li>当尝试修改一个只读的Map时，会抛出一个UnsupportedOperationException异常。<h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2>插入元素</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>获取元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.get(<span class="string">&quot;key1&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>移除元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.remove(<span class="string">&quot;key1&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>清空map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.clear();</span><br></pre></td></tr></table></figure>

<h2 id="实现类（内容有点多，下次再写完）"><a href="#实现类（内容有点多，下次再写完）" class="headerlink" title="实现类（内容有点多，下次再写完）"></a>实现类（内容有点多，下次再写完）</h2>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>编程</tag>
      </tags>
  </entry>
</search>
